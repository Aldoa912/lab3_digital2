

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Feb 03 00:09:57 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	psect	text15,local,class=CODE,merge=1,delta=2
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    27                           	dabs	1,0x7E,2
    28     0000                     
    29                           ; Version 2.40
    30                           ; Generated 17/11/2021 GMT
    31                           ; 
    32                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution. Publication is not required when
    46                           ;        this file is used in an embedded application.
    47                           ; 
    48                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    49                           ;        software without specific prior written permission.
    50                           ; 
    51                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    52                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    53                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    54                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    55                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    56                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    57                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    58                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    59                           ; 
    60                           ; 
    61                           ; Code-generator required, PIC16F887 Definitions
    62                           ; 
    63                           ; SFR Addresses
    64     0000                     	;# 
    65     0001                     	;# 
    66     0002                     	;# 
    67     0003                     	;# 
    68     0004                     	;# 
    69     0005                     	;# 
    70     0006                     	;# 
    71     0007                     	;# 
    72     0008                     	;# 
    73     0009                     	;# 
    74     000A                     	;# 
    75     000B                     	;# 
    76     000C                     	;# 
    77     000D                     	;# 
    78     000E                     	;# 
    79     000E                     	;# 
    80     000F                     	;# 
    81     0010                     	;# 
    82     0011                     	;# 
    83     0012                     	;# 
    84     0013                     	;# 
    85     0014                     	;# 
    86     0015                     	;# 
    87     0015                     	;# 
    88     0016                     	;# 
    89     0017                     	;# 
    90     0018                     	;# 
    91     0019                     	;# 
    92     001A                     	;# 
    93     001B                     	;# 
    94     001B                     	;# 
    95     001C                     	;# 
    96     001D                     	;# 
    97     001E                     	;# 
    98     001F                     	;# 
    99     0081                     	;# 
   100     0085                     	;# 
   101     0086                     	;# 
   102     0087                     	;# 
   103     0088                     	;# 
   104     0089                     	;# 
   105     008C                     	;# 
   106     008D                     	;# 
   107     008E                     	;# 
   108     008F                     	;# 
   109     0090                     	;# 
   110     0091                     	;# 
   111     0092                     	;# 
   112     0093                     	;# 
   113     0093                     	;# 
   114     0093                     	;# 
   115     0094                     	;# 
   116     0095                     	;# 
   117     0096                     	;# 
   118     0097                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009A                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009E                     	;# 
   126     009F                     	;# 
   127     0105                     	;# 
   128     0107                     	;# 
   129     0108                     	;# 
   130     0109                     	;# 
   131     010C                     	;# 
   132     010C                     	;# 
   133     010D                     	;# 
   134     010E                     	;# 
   135     010F                     	;# 
   136     0185                     	;# 
   137     0187                     	;# 
   138     0188                     	;# 
   139     0189                     	;# 
   140     018C                     	;# 
   141     018D                     	;# 
   142     0000                     	;# 
   143     0001                     	;# 
   144     0002                     	;# 
   145     0003                     	;# 
   146     0004                     	;# 
   147     0005                     	;# 
   148     0006                     	;# 
   149     0007                     	;# 
   150     0008                     	;# 
   151     0009                     	;# 
   152     000A                     	;# 
   153     000B                     	;# 
   154     000C                     	;# 
   155     000D                     	;# 
   156     000E                     	;# 
   157     000E                     	;# 
   158     000F                     	;# 
   159     0010                     	;# 
   160     0011                     	;# 
   161     0012                     	;# 
   162     0013                     	;# 
   163     0014                     	;# 
   164     0015                     	;# 
   165     0015                     	;# 
   166     0016                     	;# 
   167     0017                     	;# 
   168     0018                     	;# 
   169     0019                     	;# 
   170     001A                     	;# 
   171     001B                     	;# 
   172     001B                     	;# 
   173     001C                     	;# 
   174     001D                     	;# 
   175     001E                     	;# 
   176     001F                     	;# 
   177     0081                     	;# 
   178     0085                     	;# 
   179     0086                     	;# 
   180     0087                     	;# 
   181     0088                     	;# 
   182     0089                     	;# 
   183     008C                     	;# 
   184     008D                     	;# 
   185     008E                     	;# 
   186     008F                     	;# 
   187     0090                     	;# 
   188     0091                     	;# 
   189     0092                     	;# 
   190     0093                     	;# 
   191     0093                     	;# 
   192     0093                     	;# 
   193     0094                     	;# 
   194     0095                     	;# 
   195     0096                     	;# 
   196     0097                     	;# 
   197     0098                     	;# 
   198     0099                     	;# 
   199     009A                     	;# 
   200     009B                     	;# 
   201     009C                     	;# 
   202     009D                     	;# 
   203     009E                     	;# 
   204     009F                     	;# 
   205     0105                     	;# 
   206     0107                     	;# 
   207     0108                     	;# 
   208     0109                     	;# 
   209     010C                     	;# 
   210     010C                     	;# 
   211     010D                     	;# 
   212     010E                     	;# 
   213     010F                     	;# 
   214     0185                     	;# 
   215     0187                     	;# 
   216     0188                     	;# 
   217     0189                     	;# 
   218     018C                     	;# 
   219     018D                     	;# 
   220     0000                     	;# 
   221     0001                     	;# 
   222     0002                     	;# 
   223     0003                     	;# 
   224     0004                     	;# 
   225     0005                     	;# 
   226     0006                     	;# 
   227     0007                     	;# 
   228     0008                     	;# 
   229     0009                     	;# 
   230     000A                     	;# 
   231     000B                     	;# 
   232     000C                     	;# 
   233     000D                     	;# 
   234     000E                     	;# 
   235     000E                     	;# 
   236     000F                     	;# 
   237     0010                     	;# 
   238     0011                     	;# 
   239     0012                     	;# 
   240     0013                     	;# 
   241     0014                     	;# 
   242     0015                     	;# 
   243     0015                     	;# 
   244     0016                     	;# 
   245     0017                     	;# 
   246     0018                     	;# 
   247     0019                     	;# 
   248     001A                     	;# 
   249     001B                     	;# 
   250     001B                     	;# 
   251     001C                     	;# 
   252     001D                     	;# 
   253     001E                     	;# 
   254     001F                     	;# 
   255     0081                     	;# 
   256     0085                     	;# 
   257     0086                     	;# 
   258     0087                     	;# 
   259     0088                     	;# 
   260     0089                     	;# 
   261     008C                     	;# 
   262     008D                     	;# 
   263     008E                     	;# 
   264     008F                     	;# 
   265     0090                     	;# 
   266     0091                     	;# 
   267     0092                     	;# 
   268     0093                     	;# 
   269     0093                     	;# 
   270     0093                     	;# 
   271     0094                     	;# 
   272     0095                     	;# 
   273     0096                     	;# 
   274     0097                     	;# 
   275     0098                     	;# 
   276     0099                     	;# 
   277     009A                     	;# 
   278     009B                     	;# 
   279     009C                     	;# 
   280     009D                     	;# 
   281     009E                     	;# 
   282     009F                     	;# 
   283     0105                     	;# 
   284     0107                     	;# 
   285     0108                     	;# 
   286     0109                     	;# 
   287     010C                     	;# 
   288     010C                     	;# 
   289     010D                     	;# 
   290     010E                     	;# 
   291     010F                     	;# 
   292     0185                     	;# 
   293     0187                     	;# 
   294     0188                     	;# 
   295     0189                     	;# 
   296     018C                     	;# 
   297     018D                     	;# 
   298     0000                     	;# 
   299     0001                     	;# 
   300     0002                     	;# 
   301     0003                     	;# 
   302     0004                     	;# 
   303     0005                     	;# 
   304     0006                     	;# 
   305     0007                     	;# 
   306     0008                     	;# 
   307     0009                     	;# 
   308     000A                     	;# 
   309     000B                     	;# 
   310     000C                     	;# 
   311     000D                     	;# 
   312     000E                     	;# 
   313     000E                     	;# 
   314     000F                     	;# 
   315     0010                     	;# 
   316     0011                     	;# 
   317     0012                     	;# 
   318     0013                     	;# 
   319     0014                     	;# 
   320     0015                     	;# 
   321     0015                     	;# 
   322     0016                     	;# 
   323     0017                     	;# 
   324     0018                     	;# 
   325     0019                     	;# 
   326     001A                     	;# 
   327     001B                     	;# 
   328     001B                     	;# 
   329     001C                     	;# 
   330     001D                     	;# 
   331     001E                     	;# 
   332     001F                     	;# 
   333     0081                     	;# 
   334     0085                     	;# 
   335     0086                     	;# 
   336     0087                     	;# 
   337     0088                     	;# 
   338     0089                     	;# 
   339     008C                     	;# 
   340     008D                     	;# 
   341     008E                     	;# 
   342     008F                     	;# 
   343     0090                     	;# 
   344     0091                     	;# 
   345     0092                     	;# 
   346     0093                     	;# 
   347     0093                     	;# 
   348     0093                     	;# 
   349     0094                     	;# 
   350     0095                     	;# 
   351     0096                     	;# 
   352     0097                     	;# 
   353     0098                     	;# 
   354     0099                     	;# 
   355     009A                     	;# 
   356     009B                     	;# 
   357     009C                     	;# 
   358     009D                     	;# 
   359     009E                     	;# 
   360     009F                     	;# 
   361     0105                     	;# 
   362     0107                     	;# 
   363     0108                     	;# 
   364     0109                     	;# 
   365     010C                     	;# 
   366     010C                     	;# 
   367     010D                     	;# 
   368     010E                     	;# 
   369     010F                     	;# 
   370     0185                     	;# 
   371     0187                     	;# 
   372     0188                     	;# 
   373     0189                     	;# 
   374     018C                     	;# 
   375     018D                     	;# 
   376                           
   377                           	psect	strings
   378     0003                     __pstrings:
   379     0003                     stringtab:
   380     0003                     __stringtab:
   381                           
   382                           ;	String table - string pointers are 1 byte each
   383     0003  1BFF               	btfsc	btemp+1,7
   384     0004  280D               	ljmp	stringcode
   385     0005  1383               	bcf	3,7
   386     0006  187F               	btfsc	btemp+1,0
   387     0007  1783               	bsf	3,7
   388     0008  0800               	movf	0,w
   389     0009  0A84               	incf	4,f
   390     000A  1903               	skipnz
   391     000B  0AFF               	incf	btemp+1,f
   392     000C  0008               	return
   393     000D                     stringcode:
   394     000D                     stringdir:
   395     000D  3000               	movlw	high stringdir
   396     000E  008A               	movwf	10
   397     000F  0804               	movf	4,w
   398     0010  0A84               	incf	4,f
   399     0011  0782               	addwf	2,f
   400     0012                     __stringbase:
   401     0012  3400               	retlw	0
   402     0013                     __end_of__stringtab:
   403     0013                     _dpowers:
   404     0013  3401               	retlw	1
   405     0014  3400               	retlw	0
   406     0015  340A               	retlw	10
   407     0016  3400               	retlw	0
   408     0017  3464               	retlw	100
   409     0018  3400               	retlw	0
   410     0019  34E8               	retlw	232
   411     001A  3403               	retlw	3
   412     001B  3410               	retlw	16
   413     001C  3427               	retlw	39
   414     001D                     __end_of_dpowers:
   415     0013                     _SSPBUF	set	19
   416     0014                     _SSPCON	set	20
   417     0008                     _PORTDbits	set	8
   418     0006                     _PORTB	set	6
   419     0008                     _PORTD	set	8
   420     0007                     _PORTCbits	set	7
   421     0043                     _RD3	set	67
   422     0047                     _RD7	set	71
   423     0046                     _RD6	set	70
   424     0045                     _RD5	set	69
   425     0044                     _RD4	set	68
   426     0094                     _SSPSTATbits	set	148
   427     0094                     _SSPSTAT	set	148
   428     008F                     _OSCCONbits	set	143
   429     0087                     _TRISCbits	set	135
   430     0088                     _TRISD	set	136
   431     0086                     _TRISB	set	134
   432     043B                     _TRISC3	set	1083
   433     043D                     _TRISC5	set	1085
   434     0189                     _ANSELH	set	393
   435     0188                     _ANSEL	set	392
   436     001D                     STR_2:
   437     001D  3441               	retlw	65	;'A'
   438     001E  3444               	retlw	68	;'D'
   439     001F  3443               	retlw	67	;'C'
   440     0020  3400               	retlw	0
   441     0021                     STR_1:
   442     0021  3425               	retlw	37	;'%'
   443     0022  3475               	retlw	117	;'u'
   444     0023  3400               	retlw	0
   445                           
   446                           	psect	cinit
   447     07F8                     start_initialization:	
   448                           ; #config settings
   449                           
   450     07F8                     __initialization:
   451                           
   452                           ; Clear objects allocated to BANK0
   453     07F8  1283               	bcf	3,5	;RP0=0, select bank0
   454     07F9  1303               	bcf	3,6	;RP1=0, select bank0
   455     07FA  01AF               	clrf	__pbssBANK0& (0+127)
   456     07FB  01B0               	clrf	(__pbssBANK0+1)& (0+127)
   457     07FC                     end_of_initialization:	
   458                           ;End of C runtime variable initialization code
   459                           
   460     07FC                     __end_of__initialization:
   461     07FC  0183               	clrf	3
   462     07FD  120A  118A  2ECB   	ljmp	_main	;jump to C main() function
   463                           
   464                           	psect	bssBANK0
   465     002F                     __pbssBANK0:
   466     002F                     _ADC:
   467     002F                     	ds	1
   468     0030                     _valor:
   469     0030                     	ds	1
   470                           
   471                           	psect	cstackCOMMON
   472     0070                     __pcstackCOMMON:
   473     0070                     ?_setup:
   474     0070                     ?_Lcd_Init:	
   475                           ; 1 bytes @ 0x0
   476                           
   477     0070                     ?_spiWrite:	
   478                           ; 1 bytes @ 0x0
   479                           
   480     0070                     ??_spiWrite:	
   481                           ; 1 bytes @ 0x0
   482                           
   483     0070                     ?_spiRead:	
   484                           ; 1 bytes @ 0x0
   485                           
   486     0070                     ??_spiRead:	
   487                           ; 1 bytes @ 0x0
   488                           
   489     0070                     ?_Lcd_Clear:	
   490                           ; 1 bytes @ 0x0
   491                           
   492     0070                     ?_spiInit:	
   493                           ; 1 bytes @ 0x0
   494                           
   495     0070                     ?_main:	
   496                           ; 1 bytes @ 0x0
   497                           
   498     0070                     ?_Lcd_Port:	
   499                           ; 1 bytes @ 0x0
   500                           
   501     0070                     ??_Lcd_Port:	
   502                           ; 1 bytes @ 0x0
   503                           
   504     0070                     ?_Lcd_Cmd:	
   505                           ; 1 bytes @ 0x0
   506                           
   507     0070                     ?_Lcd_Write_Char:	
   508                           ; 1 bytes @ 0x0
   509                           
   510     0070                     ?_spiReceiveWait:	
   511                           ; 1 bytes @ 0x0
   512                           
   513     0070                     ??_spiReceiveWait:	
   514                           ; 1 bytes @ 0x0
   515                           
   516     0070                     ?___lwdiv:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0070                     Lcd_Port@a:	
   520                           ; 2 bytes @ 0x0
   521                           
   522     0070                     spiInit@sDataSample:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0070                     spiWrite@dat:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0070                     ___lwdiv@divisor:	
   529                           ; 1 bytes @ 0x0
   530                           
   531                           
   532                           ; 2 bytes @ 0x0
   533     0070                     	ds	1
   534     0071                     ??_Lcd_Cmd:
   535     0071                     ??_Lcd_Write_Char:	
   536                           ; 1 bytes @ 0x1
   537                           
   538     0071                     spiInit@sClockIdle:	
   539                           ; 1 bytes @ 0x1
   540                           
   541                           
   542                           ; 1 bytes @ 0x1
   543     0071                     	ds	1
   544     0072                     Lcd_Write_Char@temp:
   545     0072                     spiInit@sTransmitEdge:	
   546                           ; 1 bytes @ 0x2
   547                           
   548     0072                     ___lwdiv@dividend:	
   549                           ; 1 bytes @ 0x2
   550                           
   551                           
   552                           ; 2 bytes @ 0x2
   553     0072                     	ds	1
   554     0073                     ??_spiInit:
   555     0073                     Lcd_Cmd@a:	
   556                           ; 1 bytes @ 0x3
   557                           
   558     0073                     Lcd_Write_Char@y:	
   559                           ; 1 bytes @ 0x3
   560                           
   561     0073                     spiInit@sType:	
   562                           ; 1 bytes @ 0x3
   563                           
   564                           
   565                           ; 1 bytes @ 0x3
   566     0073                     	ds	1
   567     0074                     ??_setup:
   568     0074                     ??_Lcd_Init:	
   569                           ; 1 bytes @ 0x4
   570                           
   571     0074                     ??_Lcd_Clear:	
   572                           ; 1 bytes @ 0x4
   573                           
   574     0074                     ?_Lcd_Set_Cursor:	
   575                           ; 1 bytes @ 0x4
   576                           
   577     0074                     ??___lwdiv:	
   578                           ; 1 bytes @ 0x4
   579                           
   580     0074                     Lcd_Set_Cursor@b:	
   581                           ; 1 bytes @ 0x4
   582                           
   583     0074                     Lcd_Write_Char@a:	
   584                           ; 1 bytes @ 0x4
   585                           
   586                           
   587                           ; 1 bytes @ 0x4
   588     0074                     	ds	1
   589     0075                     ??_Lcd_Set_Cursor:
   590     0075                     ?_Lcd_Write_String:	
   591                           ; 1 bytes @ 0x5
   592                           
   593     0075                     Lcd_Write_String@a:	
   594                           ; 1 bytes @ 0x5
   595                           
   596     0075                     ___lwdiv@quotient:	
   597                           ; 2 bytes @ 0x5
   598                           
   599                           
   600                           ; 2 bytes @ 0x5
   601     0075                     	ds	1
   602     0076                     Lcd_Set_Cursor@a:
   603                           
   604                           ; 1 bytes @ 0x6
   605     0076                     	ds	1
   606     0077                     ??_Lcd_Write_String:
   607     0077                     Lcd_Set_Cursor@z:	
   608                           ; 1 bytes @ 0x7
   609                           
   610     0077                     ___lwdiv@counter:	
   611                           ; 1 bytes @ 0x7
   612                           
   613                           
   614                           ; 1 bytes @ 0x7
   615     0077                     	ds	1
   616     0078                     ?___lwmod:
   617     0078                     Lcd_Set_Cursor@y:	
   618                           ; 2 bytes @ 0x8
   619                           
   620     0078                     ___lwmod@divisor:	
   621                           ; 1 bytes @ 0x8
   622                           
   623                           
   624                           ; 2 bytes @ 0x8
   625     0078                     	ds	1
   626     0079                     Lcd_Set_Cursor@temp:
   627                           
   628                           ; 1 bytes @ 0x9
   629     0079                     	ds	1
   630     007A                     Lcd_Write_String@i:
   631     007A                     ___lwmod@dividend:	
   632                           ; 2 bytes @ 0xA
   633                           
   634                           
   635                           ; 2 bytes @ 0xA
   636     007A                     	ds	2
   637     007C                     ??___lwmod:
   638                           
   639                           ; 1 bytes @ 0xC
   640     007C                     	ds	1
   641     007D                     ___lwmod@counter:
   642                           
   643                           ; 1 bytes @ 0xD
   644     007D                     	ds	1
   645                           
   646                           	psect	cstackBANK0
   647     0020                     __pcstackBANK0:
   648     0020                     ?_sprintf:
   649     0020                     sprintf@f:	
   650                           ; 2 bytes @ 0x0
   651                           
   652                           
   653                           ; 1 bytes @ 0x0
   654     0020                     	ds	3
   655     0023                     ??_sprintf:
   656                           
   657                           ; 1 bytes @ 0x3
   658     0023                     	ds	3
   659     0026                     sprintf@flag:
   660                           
   661                           ; 1 bytes @ 0x6
   662     0026                     	ds	1
   663     0027                     sprintf@ap:
   664                           
   665                           ; 1 bytes @ 0x7
   666     0027                     	ds	1
   667     0028                     sprintf@val:
   668                           
   669                           ; 2 bytes @ 0x8
   670     0028                     	ds	2
   671     002A                     sprintf@prec:
   672                           
   673                           ; 1 bytes @ 0xA
   674     002A                     	ds	1
   675     002B                     sprintf@sp:
   676                           
   677                           ; 1 bytes @ 0xB
   678     002B                     	ds	1
   679     002C                     sprintf@c:
   680                           
   681                           ; 1 bytes @ 0xC
   682     002C                     	ds	1
   683     002D                     ??_main:
   684                           
   685                           ; 1 bytes @ 0xD
   686     002D                     	ds	2
   687                           
   688                           	psect	maintext
   689     06CB                     __pmaintext:	
   690 ;;
   691 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   692 ;;
   693 ;; *************** function _main *****************
   694 ;; Defined at:
   695 ;;		line 59 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : B00/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         0       0       0       0       0
   711 ;;      Temps:          0       2       0       0       0
   712 ;;      Totals:         0       2       0       0       0
   713 ;;Total ram usage:        2 bytes
   714 ;; Hardware stack levels required when called: 3
   715 ;; This function calls:
   716 ;;		_Lcd_Clear
   717 ;;		_Lcd_Init
   718 ;;		_Lcd_Set_Cursor
   719 ;;		_Lcd_Write_String
   720 ;;		_setup
   721 ;;		_spiRead
   722 ;;		_spiWrite
   723 ;;		_sprintf
   724 ;; This function is called by:
   725 ;;		Startup code after reset
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729     06CB                     _main:	
   730                           ;psect for function _main
   731                           
   732     06CB                     l1241:	
   733                           ;incstack = 0
   734                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   735                           
   736                           
   737                           ;main.c: 60:     setup();
   738     06CB  120A  118A  2512  120A  118A  	fcall	_setup
   739                           
   740                           ;main.c: 61:     Lcd_Init();
   741     06D0  120A  118A  266E  120A  118A  	fcall	_Lcd_Init
   742     06D5                     l1243:
   743                           
   744                           ;main.c: 67:         PORTCbits.RC2 = 0;
   745     06D5  1283               	bcf	3,5	;RP0=0, select bank0
   746     06D6  1303               	bcf	3,6	;RP1=0, select bank0
   747     06D7  1107               	bcf	7,2	;volatile
   748     06D8                     l1245:
   749                           
   750                           ;main.c: 68:         _delay((unsigned long)((1)*(4000000/4000.0)));
   751     06D8  30C7               	movlw	199
   752     06D9  1283               	bcf	3,5	;RP0=0, select bank0
   753     06DA  1303               	bcf	3,6	;RP1=0, select bank0
   754     06DB  00AD               	movwf	??_main
   755     06DC                     u657:
   756     06DC  2EDD               	nop2
   757     06DD  0BAD               	decfsz	??_main,f
   758     06DE  2EDC               	goto	u657
   759     06DF  2EE0               	nop2
   760     06E0                     l1247:
   761                           
   762                           ;main.c: 70:        spiWrite(PORTD);
   763     06E0  1283               	bcf	3,5	;RP0=0, select bank0
   764     06E1  1303               	bcf	3,6	;RP1=0, select bank0
   765     06E2  0808               	movf	8,w	;volatile
   766     06E3  120A  118A  249D  120A  118A  	fcall	_spiWrite
   767     06E8                     l1249:
   768                           
   769                           ;main.c: 71:        ADC = spiRead();
   770     06E8  120A  118A  24AA  120A  118A  	fcall	_spiRead
   771     06ED  1283               	bcf	3,5	;RP0=0, select bank0
   772     06EE  1303               	bcf	3,6	;RP1=0, select bank0
   773     06EF  00AF               	movwf	_ADC
   774     06F0                     l1251:
   775                           
   776                           ;main.c: 73:         _delay((unsigned long)((1)*(4000000/4000.0)));
   777     06F0  30C7               	movlw	199
   778     06F1  1283               	bcf	3,5	;RP0=0, select bank0
   779     06F2  1303               	bcf	3,6	;RP1=0, select bank0
   780     06F3  00AD               	movwf	??_main
   781     06F4                     u667:
   782     06F4  2EF5               	nop2
   783     06F5  0BAD               	decfsz	??_main,f
   784     06F6  2EF4               	goto	u667
   785     06F7  2EF8               	nop2
   786     06F8                     l1253:
   787                           
   788                           ;main.c: 74:         PORTCbits.RC2 = 1;
   789     06F8  1283               	bcf	3,5	;RP0=0, select bank0
   790     06F9  1303               	bcf	3,6	;RP1=0, select bank0
   791     06FA  1507               	bsf	7,2	;volatile
   792     06FB                     l1255:
   793                           
   794                           ;main.c: 76:         PORTB = ADC;
   795     06FB  082F               	movf	_ADC,w
   796     06FC  0086               	movwf	6	;volatile
   797     06FD                     l1257:
   798                           
   799                           ;main.c: 77:         sprintf(valor, "%u", ADC);
   800     06FD  300F               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   801     06FE  00A0               	movwf	sprintf@f
   802     06FF  082F               	movf	_ADC,w
   803     0700  00AD               	movwf	??_main
   804     0701  01AE               	clrf	??_main+1
   805     0702  082D               	movf	??_main,w
   806     0703  00A1               	movwf	?_sprintf+1
   807     0704  082E               	movf	??_main+1,w
   808     0705  00A2               	movwf	?_sprintf+2
   809     0706  3030               	movlw	(low (_valor| 0))& (0+255)
   810     0707  120A  118A  2737  120A  118A  	fcall	_sprintf
   811     070C                     l1259:
   812                           
   813                           ;main.c: 79:         Lcd_Clear();
   814     070C  120A  118A  24B3  120A  118A  	fcall	_Lcd_Clear
   815     0711                     l1261:
   816                           
   817                           ;main.c: 80:         Lcd_Set_Cursor(1,1);
   818     0711  01F4               	clrf	Lcd_Set_Cursor@b
   819     0712  0AF4               	incf	Lcd_Set_Cursor@b,f
   820     0713  3001               	movlw	1
   821     0714  120A  118A  2628  120A  118A  	fcall	_Lcd_Set_Cursor
   822     0719                     l1263:
   823                           
   824                           ;main.c: 81:         Lcd_Write_String("ADC");
   825     0719  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   826     071A  00F5               	movwf	Lcd_Write_String@a
   827     071B  3080               	movlw	128
   828     071C  00F6               	movwf	Lcd_Write_String@a+1
   829     071D  120A  118A  25A2  120A  118A  	fcall	_Lcd_Write_String
   830     0722                     l1265:
   831                           
   832                           ;main.c: 82:         Lcd_Set_Cursor(2,1);
   833     0722  01F4               	clrf	Lcd_Set_Cursor@b
   834     0723  0AF4               	incf	Lcd_Set_Cursor@b,f
   835     0724  3002               	movlw	2
   836     0725  120A  118A  2628  120A  118A  	fcall	_Lcd_Set_Cursor
   837     072A                     l1267:
   838                           
   839                           ;main.c: 83:         Lcd_Write_String(valor);
   840     072A  3030               	movlw	(low (_valor| 0))& (0+255)
   841     072B  00F5               	movwf	Lcd_Write_String@a
   842     072C  3000               	movlw	0
   843     072D  00F6               	movwf	Lcd_Write_String@a+1
   844     072E  120A  118A  25A2  120A  118A  	fcall	_Lcd_Write_String
   845     0733  2ED5               	goto	l1243
   846     0734  120A  118A  2800   	ljmp	start
   847     0737                     __end_of_main:
   848                           
   849                           	psect	text1
   850     0737                     __ptext1:	
   851 ;; *************** function _sprintf *****************
   852 ;; Defined at:
   853 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  sp              1    wreg     PTR unsigned char 
   856 ;;		 -> valor(1), 
   857 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   858 ;;		 -> STR_1(3), 
   859 ;; Auto vars:     Size  Location     Type
   860 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   861 ;;		 -> valor(1), 
   862 ;;  tmpval          4    0        struct .
   863 ;;  val             2    8[BANK0 ] unsigned int 
   864 ;;  cp              2    0        PTR const unsigned char 
   865 ;;  len             2    0        unsigned int 
   866 ;;  c               1   12[BANK0 ] unsigned char 
   867 ;;  prec            1   10[BANK0 ] char 
   868 ;;  ap              1    7[BANK0 ] PTR void [1]
   869 ;;		 -> ?_sprintf(2), 
   870 ;;  flag            1    6[BANK0 ] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;                  2    0[BANK0 ] int 
   873 ;; Registers used:
   874 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   880 ;;      Params:         0       3       0       0       0
   881 ;;      Locals:         0       7       0       0       0
   882 ;;      Temps:          0       3       0       0       0
   883 ;;      Totals:         0      13       0       0       0
   884 ;;Total ram usage:       13 bytes
   885 ;; Hardware stack levels used: 1
   886 ;; Hardware stack levels required when called: 1
   887 ;; This function calls:
   888 ;;		___lwdiv
   889 ;;		___lwmod
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895     0737                     _sprintf:	
   896                           ;psect for function _sprintf
   897                           
   898                           
   899                           ;incstack = 0
   900                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   901                           ;sprintf@sp stored from wreg
   902     0737  1283               	bcf	3,5	;RP0=0, select bank0
   903     0738  1303               	bcf	3,6	;RP1=0, select bank0
   904     0739  00AB               	movwf	sprintf@sp
   905     073A                     l1159:
   906                           
   907                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   908     073A  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   909     073B  00A7               	movwf	sprintf@ap
   910                           
   911                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   912     073C  2FE3               	goto	l1201
   913     073D                     l1161:
   914                           
   915                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   916     073D  3025               	movlw	37
   917     073E  062C               	xorwf	sprintf@c,w
   918     073F  1903               	btfsc	3,2
   919     0740  2F42               	goto	u531
   920     0741  2F43               	goto	u530
   921     0742                     u531:
   922     0742  2F4D               	goto	l1167
   923     0743                     u530:
   924     0743                     l1163:
   925                           
   926                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   927     0743  082B               	movf	sprintf@sp,w
   928     0744  0084               	movwf	4
   929     0745  082C               	movf	sprintf@c,w
   930     0746  1383               	bcf	3,7	;select IRP bank0
   931     0747  0080               	movwf	0
   932     0748                     l1165:
   933     0748  3001               	movlw	1
   934     0749  00A3               	movwf	??_sprintf
   935     074A  0823               	movf	??_sprintf,w
   936     074B  07AB               	addwf	sprintf@sp,f
   937                           
   938                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
   939     074C  2FE3               	goto	l1201
   940     074D                     l1167:
   941                           
   942                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   943     074D  01A6               	clrf	sprintf@flag
   944                           
   945                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   946     074E  2F54               	goto	l1173
   947     074F                     l1169:
   948                           
   949                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 844:    flag |= 0
      +                          xC0;
   950     074F  30C0               	movlw	192
   951     0750  00A3               	movwf	??_sprintf
   952     0751  0823               	movf	??_sprintf,w
   953     0752  04A6               	iorwf	sprintf@flag,f
   954                           
   955                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 845:    break;
   956     0753  2F6E               	goto	l1175
   957     0754                     l1173:
   958     0754  3001               	movlw	1
   959     0755  07A0               	addwf	sprintf@f,f
   960     0756  30FF               	movlw	-1
   961     0757  0720               	addwf	sprintf@f,w
   962     0758  0084               	movwf	4
   963     0759  120A  118A  200D  120A  118A  	fcall	stringdir
   964     075E  00AC               	movwf	sprintf@c
   965     075F  00A3               	movwf	??_sprintf
   966     0760  01A4               	clrf	??_sprintf+1
   967                           
   968                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   969                           ; Switch size 1, requested type "simple"
   970                           ; Number of cases is 1, Range of values is 0 to 0
   971                           ; switch strategies available:
   972                           ; Name         Instructions Cycles
   973                           ; simple_byte            4     3 (average)
   974                           ; direct_byte           11     8 (fixed)
   975                           ; jumptable            260     6 (fixed)
   976                           ;	Chosen strategy is simple_byte
   977     0761  0824               	movf	??_sprintf+1,w
   978     0762  3A00               	xorlw	0	; case 0
   979     0763  1903               	skipnz
   980     0764  2F66               	goto	l1293
   981     0765  2FE3               	goto	l1201
   982     0766                     l1293:
   983                           
   984                           ; Switch size 1, requested type "simple"
   985                           ; Number of cases is 2, Range of values is 0 to 117
   986                           ; switch strategies available:
   987                           ; Name         Instructions Cycles
   988                           ; simple_byte            7     4 (average)
   989                           ; jumptable            260     6 (fixed)
   990                           ;	Chosen strategy is simple_byte
   991     0766  0823               	movf	??_sprintf,w
   992     0767  3A00               	xorlw	0	; case 0
   993     0768  1903               	skipnz
   994     0769  2FF3               	goto	l1203
   995     076A  3A75               	xorlw	117	; case 117
   996     076B  1903               	skipnz
   997     076C  2F4F               	goto	l1169
   998     076D  2FE3               	goto	l1201
   999     076E                     l1175:
  1000                           
  1001                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1299:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1312:     val = (*(unsign
      +                          ed *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1002     076E  0827               	movf	sprintf@ap,w
  1003     076F  0084               	movwf	4
  1004     0770  1383               	bcf	3,7	;select IRP bank0
  1005     0771  0800               	movf	0,w
  1006     0772  00A8               	movwf	sprintf@val
  1007     0773  0A84               	incf	4,f
  1008     0774  0800               	movf	0,w
  1009     0775  00A9               	movwf	sprintf@val+1
  1010     0776                     l1177:
  1011     0776  3002               	movlw	2
  1012     0777  00A3               	movwf	??_sprintf
  1013     0778  0823               	movf	??_sprintf,w
  1014     0779  07A7               	addwf	sprintf@ap,f
  1015     077A                     l1179:
  1016                           
  1017                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1313:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1018     077A  01AC               	clrf	sprintf@c
  1019     077B  0AAC               	incf	sprintf@c,f
  1020     077C                     l1185:
  1021                           
  1022                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1023     077C  082C               	movf	sprintf@c,w
  1024     077D  00A3               	movwf	??_sprintf
  1025     077E  0723               	addwf	??_sprintf,w
  1026     077F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1027     0780  0084               	movwf	4
  1028     0781  120A  118A  200D  120A  118A  	fcall	stringdir
  1029     0786  00A4               	movwf	??_sprintf+1
  1030     0787  120A  118A  200D  120A  118A  	fcall	stringdir
  1031     078C  00A5               	movwf	??_sprintf+2
  1032     078D  0825               	movf	??_sprintf+2,w
  1033     078E  0229               	subwf	sprintf@val+1,w
  1034     078F  1D03               	skipz
  1035     0790  2F93               	goto	u545
  1036     0791  0824               	movf	??_sprintf+1,w
  1037     0792  0228               	subwf	sprintf@val,w
  1038     0793                     u545:
  1039     0793  1803               	skipnc
  1040     0794  2F96               	goto	u541
  1041     0795  2F97               	goto	u540
  1042     0796                     u541:
  1043     0796  2F98               	goto	l1189
  1044     0797                     u540:
  1045     0797  2FA2               	goto	l1191
  1046     0798                     l1189:
  1047     0798  3001               	movlw	1
  1048     0799  00A3               	movwf	??_sprintf
  1049     079A  0823               	movf	??_sprintf,w
  1050     079B  07AC               	addwf	sprintf@c,f
  1051     079C  3005               	movlw	5
  1052     079D  062C               	xorwf	sprintf@c,w
  1053     079E  1D03               	btfss	3,2
  1054     079F  2FA1               	goto	u551
  1055     07A0  2FA2               	goto	u550
  1056     07A1                     u551:
  1057     07A1  2F7C               	goto	l1185
  1058     07A2                     u550:
  1059     07A2                     l1191:
  1060                           
  1061                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Program File
      +                          s\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1062     07A2  082C               	movf	sprintf@c,w
  1063     07A3  00AA               	movwf	sprintf@prec
  1064                           
  1065                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1066     07A4  2FDA               	goto	l1199
  1067     07A5                     l1193:
  1068                           
  1069                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1070     07A5  300A               	movlw	10
  1071     07A6  00F8               	movwf	___lwmod@divisor
  1072     07A7  3000               	movlw	0
  1073     07A8  00F9               	movwf	___lwmod@divisor+1
  1074     07A9  082A               	movf	sprintf@prec,w
  1075     07AA  00A3               	movwf	??_sprintf
  1076     07AB  0723               	addwf	??_sprintf,w
  1077     07AC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1078     07AD  0084               	movwf	4
  1079     07AE  120A  118A  200D  120A  118A  	fcall	stringdir
  1080     07B3  00F0               	movwf	___lwdiv@divisor
  1081     07B4  120A  118A  200D  120A  118A  	fcall	stringdir
  1082     07B9  00F1               	movwf	___lwdiv@divisor+1
  1083     07BA  0829               	movf	sprintf@val+1,w
  1084     07BB  00F3               	movwf	___lwdiv@dividend+1
  1085     07BC  0828               	movf	sprintf@val,w
  1086     07BD  00F2               	movwf	___lwdiv@dividend
  1087     07BE  120A  118A  25E4  120A  118A  	fcall	___lwdiv
  1088     07C3  0871               	movf	?___lwdiv+1,w
  1089     07C4  00FB               	movwf	___lwmod@dividend+1
  1090     07C5  0870               	movf	?___lwdiv,w
  1091     07C6  00FA               	movwf	___lwmod@dividend
  1092     07C7  120A  118A  2568  120A  118A  	fcall	___lwmod
  1093     07CC  0878               	movf	?___lwmod,w
  1094     07CD  3E30               	addlw	48
  1095     07CE  1283               	bcf	3,5	;RP0=0, select bank0
  1096     07CF  1303               	bcf	3,6	;RP1=0, select bank0
  1097     07D0  00AC               	movwf	sprintf@c
  1098     07D1                     l1195:
  1099                           
  1100                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1101     07D1  082B               	movf	sprintf@sp,w
  1102     07D2  0084               	movwf	4
  1103     07D3  082C               	movf	sprintf@c,w
  1104     07D4  1383               	bcf	3,7	;select IRP bank0
  1105     07D5  0080               	movwf	0
  1106     07D6                     l1197:
  1107     07D6  3001               	movlw	1
  1108     07D7  00A3               	movwf	??_sprintf
  1109     07D8  0823               	movf	??_sprintf,w
  1110     07D9  07AB               	addwf	sprintf@sp,f
  1111     07DA                     l1199:
  1112                           
  1113                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1114     07DA  30FF               	movlw	255
  1115     07DB  00A3               	movwf	??_sprintf
  1116     07DC  0823               	movf	??_sprintf,w
  1117     07DD  07AA               	addwf	sprintf@prec,f
  1118     07DE  0A2A               	incf	sprintf@prec,w
  1119     07DF  1D03               	btfss	3,2
  1120     07E0  2FE2               	goto	u561
  1121     07E1  2FE3               	goto	u560
  1122     07E2                     u561:
  1123     07E2  2FA5               	goto	l1193
  1124     07E3                     u560:
  1125     07E3                     l1201:
  1126                           
  1127                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1128     07E3  3001               	movlw	1
  1129     07E4  07A0               	addwf	sprintf@f,f
  1130     07E5  30FF               	movlw	-1
  1131     07E6  0720               	addwf	sprintf@f,w
  1132     07E7  0084               	movwf	4
  1133     07E8  120A  118A  200D  120A  118A  	fcall	stringdir
  1134     07ED  00AC               	movwf	sprintf@c
  1135     07EE  082C               	movf	sprintf@c,w
  1136     07EF  1D03               	btfss	3,2
  1137     07F0  2FF2               	goto	u571
  1138     07F1  2FF3               	goto	u570
  1139     07F2                     u571:
  1140     07F2  2F3D               	goto	l1161
  1141     07F3                     u570:
  1142     07F3                     l1203:
  1143                           
  1144                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1145     07F3  082B               	movf	sprintf@sp,w
  1146     07F4  0084               	movwf	4
  1147     07F5  1383               	bcf	3,7	;select IRP bank0
  1148     07F6  0180               	clrf	0
  1149     07F7                     l249:
  1150     07F7  0008               	return
  1151     07F8                     __end_of_sprintf:
  1152                           
  1153                           	psect	text2
  1154     0568                     __ptext2:	
  1155 ;; *************** function ___lwmod *****************
  1156 ;; Defined at:
  1157 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1158 ;; Parameters:    Size  Location     Type
  1159 ;;  divisor         2    8[COMMON] unsigned int 
  1160 ;;  dividend        2   10[COMMON] unsigned int 
  1161 ;; Auto vars:     Size  Location     Type
  1162 ;;  counter         1   13[COMMON] unsigned char 
  1163 ;; Return value:  Size  Location     Type
  1164 ;;                  2    8[COMMON] unsigned int 
  1165 ;; Registers used:
  1166 ;;		wreg, status,2, status,0
  1167 ;; Tracked objects:
  1168 ;;		On entry : 0/0
  1169 ;;		On exit  : 0/0
  1170 ;;		Unchanged: 0/0
  1171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1172 ;;      Params:         4       0       0       0       0
  1173 ;;      Locals:         1       0       0       0       0
  1174 ;;      Temps:          1       0       0       0       0
  1175 ;;      Totals:         6       0       0       0       0
  1176 ;;Total ram usage:        6 bytes
  1177 ;; Hardware stack levels used: 1
  1178 ;; This function calls:
  1179 ;;		Nothing
  1180 ;; This function is called by:
  1181 ;;		_sprintf
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185     0568                     ___lwmod:	
  1186                           ;psect for function ___lwmod
  1187                           
  1188     0568                     l1107:	
  1189                           ;incstack = 0
  1190                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1191                           
  1192     0568  0878               	movf	___lwmod@divisor,w
  1193     0569  0479               	iorwf	___lwmod@divisor+1,w
  1194     056A  1903               	btfsc	3,2
  1195     056B  2D6D               	goto	u471
  1196     056C  2D6E               	goto	u470
  1197     056D                     u471:
  1198     056D  2D9D               	goto	l1125
  1199     056E                     u470:
  1200     056E                     l1109:
  1201     056E  01FD               	clrf	___lwmod@counter
  1202     056F  0AFD               	incf	___lwmod@counter,f
  1203     0570  2D7C               	goto	l1115
  1204     0571                     l1111:
  1205     0571  3001               	movlw	1
  1206     0572                     u485:
  1207     0572  1003               	clrc
  1208     0573  0DF8               	rlf	___lwmod@divisor,f
  1209     0574  0DF9               	rlf	___lwmod@divisor+1,f
  1210     0575  3EFF               	addlw	-1
  1211     0576  1D03               	skipz
  1212     0577  2D72               	goto	u485
  1213     0578                     l1113:
  1214     0578  3001               	movlw	1
  1215     0579  00FC               	movwf	??___lwmod
  1216     057A  087C               	movf	??___lwmod,w
  1217     057B  07FD               	addwf	___lwmod@counter,f
  1218     057C                     l1115:
  1219     057C  1FF9               	btfss	___lwmod@divisor+1,7
  1220     057D  2D7F               	goto	u491
  1221     057E  2D80               	goto	u490
  1222     057F                     u491:
  1223     057F  2D71               	goto	l1111
  1224     0580                     u490:
  1225     0580                     l1117:
  1226     0580  0879               	movf	___lwmod@divisor+1,w
  1227     0581  027B               	subwf	___lwmod@dividend+1,w
  1228     0582  1D03               	skipz
  1229     0583  2D86               	goto	u505
  1230     0584  0878               	movf	___lwmod@divisor,w
  1231     0585  027A               	subwf	___lwmod@dividend,w
  1232     0586                     u505:
  1233     0586  1C03               	skipc
  1234     0587  2D89               	goto	u501
  1235     0588  2D8A               	goto	u500
  1236     0589                     u501:
  1237     0589  2D90               	goto	l1121
  1238     058A                     u500:
  1239     058A                     l1119:
  1240     058A  0878               	movf	___lwmod@divisor,w
  1241     058B  02FA               	subwf	___lwmod@dividend,f
  1242     058C  0879               	movf	___lwmod@divisor+1,w
  1243     058D  1C03               	skipc
  1244     058E  03FB               	decf	___lwmod@dividend+1,f
  1245     058F  02FB               	subwf	___lwmod@dividend+1,f
  1246     0590                     l1121:
  1247     0590  3001               	movlw	1
  1248     0591                     u515:
  1249     0591  1003               	clrc
  1250     0592  0CF9               	rrf	___lwmod@divisor+1,f
  1251     0593  0CF8               	rrf	___lwmod@divisor,f
  1252     0594  3EFF               	addlw	-1
  1253     0595  1D03               	skipz
  1254     0596  2D91               	goto	u515
  1255     0597                     l1123:
  1256     0597  3001               	movlw	1
  1257     0598  02FD               	subwf	___lwmod@counter,f
  1258     0599  1D03               	btfss	3,2
  1259     059A  2D9C               	goto	u521
  1260     059B  2D9D               	goto	u520
  1261     059C                     u521:
  1262     059C  2D80               	goto	l1117
  1263     059D                     u520:
  1264     059D                     l1125:
  1265     059D  087B               	movf	___lwmod@dividend+1,w
  1266     059E  00F9               	movwf	?___lwmod+1
  1267     059F  087A               	movf	___lwmod@dividend,w
  1268     05A0  00F8               	movwf	?___lwmod
  1269     05A1                     l535:
  1270     05A1  0008               	return
  1271     05A2                     __end_of___lwmod:
  1272                           
  1273                           	psect	text3
  1274     05E4                     __ptext3:	
  1275 ;; *************** function ___lwdiv *****************
  1276 ;; Defined at:
  1277 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;  divisor         2    0[COMMON] unsigned int 
  1280 ;;  dividend        2    2[COMMON] unsigned int 
  1281 ;; Auto vars:     Size  Location     Type
  1282 ;;  quotient        2    5[COMMON] unsigned int 
  1283 ;;  counter         1    7[COMMON] unsigned char 
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  2    0[COMMON] unsigned int 
  1286 ;; Registers used:
  1287 ;;		wreg, status,2, status,0
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: 0/0
  1292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1293 ;;      Params:         4       0       0       0       0
  1294 ;;      Locals:         3       0       0       0       0
  1295 ;;      Temps:          1       0       0       0       0
  1296 ;;      Totals:         8       0       0       0       0
  1297 ;;Total ram usage:        8 bytes
  1298 ;; Hardware stack levels used: 1
  1299 ;; This function calls:
  1300 ;;		Nothing
  1301 ;; This function is called by:
  1302 ;;		_sprintf
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306     05E4                     ___lwdiv:	
  1307                           ;psect for function ___lwdiv
  1308                           
  1309     05E4                     l1081:	
  1310                           ;incstack = 0
  1311                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1312                           
  1313     05E4  01F5               	clrf	___lwdiv@quotient
  1314     05E5  01F6               	clrf	___lwdiv@quotient+1
  1315     05E6                     l1083:
  1316     05E6  0870               	movf	___lwdiv@divisor,w
  1317     05E7  0471               	iorwf	___lwdiv@divisor+1,w
  1318     05E8  1903               	btfsc	3,2
  1319     05E9  2DEB               	goto	u401
  1320     05EA  2DEC               	goto	u400
  1321     05EB                     u401:
  1322     05EB  2E23               	goto	l1103
  1323     05EC                     u400:
  1324     05EC                     l1085:
  1325     05EC  01F7               	clrf	___lwdiv@counter
  1326     05ED  0AF7               	incf	___lwdiv@counter,f
  1327     05EE  2DFA               	goto	l1091
  1328     05EF                     l1087:
  1329     05EF  3001               	movlw	1
  1330     05F0                     u415:
  1331     05F0  1003               	clrc
  1332     05F1  0DF0               	rlf	___lwdiv@divisor,f
  1333     05F2  0DF1               	rlf	___lwdiv@divisor+1,f
  1334     05F3  3EFF               	addlw	-1
  1335     05F4  1D03               	skipz
  1336     05F5  2DF0               	goto	u415
  1337     05F6                     l1089:
  1338     05F6  3001               	movlw	1
  1339     05F7  00F4               	movwf	??___lwdiv
  1340     05F8  0874               	movf	??___lwdiv,w
  1341     05F9  07F7               	addwf	___lwdiv@counter,f
  1342     05FA                     l1091:
  1343     05FA  1FF1               	btfss	___lwdiv@divisor+1,7
  1344     05FB  2DFD               	goto	u421
  1345     05FC  2DFE               	goto	u420
  1346     05FD                     u421:
  1347     05FD  2DEF               	goto	l1087
  1348     05FE                     u420:
  1349     05FE                     l1093:
  1350     05FE  3001               	movlw	1
  1351     05FF                     u435:
  1352     05FF  1003               	clrc
  1353     0600  0DF5               	rlf	___lwdiv@quotient,f
  1354     0601  0DF6               	rlf	___lwdiv@quotient+1,f
  1355     0602  3EFF               	addlw	-1
  1356     0603  1D03               	skipz
  1357     0604  2DFF               	goto	u435
  1358     0605  0871               	movf	___lwdiv@divisor+1,w
  1359     0606  0273               	subwf	___lwdiv@dividend+1,w
  1360     0607  1D03               	skipz
  1361     0608  2E0B               	goto	u445
  1362     0609  0870               	movf	___lwdiv@divisor,w
  1363     060A  0272               	subwf	___lwdiv@dividend,w
  1364     060B                     u445:
  1365     060B  1C03               	skipc
  1366     060C  2E0E               	goto	u441
  1367     060D  2E0F               	goto	u440
  1368     060E                     u441:
  1369     060E  2E16               	goto	l1099
  1370     060F                     u440:
  1371     060F                     l1095:
  1372     060F  0870               	movf	___lwdiv@divisor,w
  1373     0610  02F2               	subwf	___lwdiv@dividend,f
  1374     0611  0871               	movf	___lwdiv@divisor+1,w
  1375     0612  1C03               	skipc
  1376     0613  03F3               	decf	___lwdiv@dividend+1,f
  1377     0614  02F3               	subwf	___lwdiv@dividend+1,f
  1378     0615                     l1097:
  1379     0615  1475               	bsf	___lwdiv@quotient,0
  1380     0616                     l1099:
  1381     0616  3001               	movlw	1
  1382     0617                     u455:
  1383     0617  1003               	clrc
  1384     0618  0CF1               	rrf	___lwdiv@divisor+1,f
  1385     0619  0CF0               	rrf	___lwdiv@divisor,f
  1386     061A  3EFF               	addlw	-1
  1387     061B  1D03               	skipz
  1388     061C  2E17               	goto	u455
  1389     061D                     l1101:
  1390     061D  3001               	movlw	1
  1391     061E  02F7               	subwf	___lwdiv@counter,f
  1392     061F  1D03               	btfss	3,2
  1393     0620  2E22               	goto	u461
  1394     0621  2E23               	goto	u460
  1395     0622                     u461:
  1396     0622  2DFE               	goto	l1093
  1397     0623                     u460:
  1398     0623                     l1103:
  1399     0623  0876               	movf	___lwdiv@quotient+1,w
  1400     0624  00F1               	movwf	?___lwdiv+1
  1401     0625  0875               	movf	___lwdiv@quotient,w
  1402     0626  00F0               	movwf	?___lwdiv
  1403     0627                     l525:
  1404     0627  0008               	return
  1405     0628                     __end_of___lwdiv:
  1406                           
  1407                           	psect	text4
  1408     049D                     __ptext4:	
  1409 ;; *************** function _spiWrite *****************
  1410 ;; Defined at:
  1411 ;;		line 25 in file "SPI.c"
  1412 ;; Parameters:    Size  Location     Type
  1413 ;;  dat             1    wreg     unsigned char 
  1414 ;; Auto vars:     Size  Location     Type
  1415 ;;  dat             1    0[COMMON] unsigned char 
  1416 ;; Return value:  Size  Location     Type
  1417 ;;                  1    wreg      void 
  1418 ;; Registers used:
  1419 ;;		wreg
  1420 ;; Tracked objects:
  1421 ;;		On entry : 0/0
  1422 ;;		On exit  : 0/0
  1423 ;;		Unchanged: 0/0
  1424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1425 ;;      Params:         0       0       0       0       0
  1426 ;;      Locals:         1       0       0       0       0
  1427 ;;      Temps:          0       0       0       0       0
  1428 ;;      Totals:         1       0       0       0       0
  1429 ;;Total ram usage:        1 bytes
  1430 ;; Hardware stack levels used: 1
  1431 ;; This function calls:
  1432 ;;		Nothing
  1433 ;; This function is called by:
  1434 ;;		_main
  1435 ;; This function uses a non-reentrant model
  1436 ;;
  1437                           
  1438     049D                     _spiWrite:	
  1439                           ;psect for function _spiWrite
  1440                           
  1441                           
  1442                           ;incstack = 0
  1443                           ; Regs used in _spiWrite: [wreg]
  1444                           ;spiWrite@dat stored from wreg
  1445     049D  00F0               	movwf	spiWrite@dat
  1446     049E                     l1151:
  1447                           
  1448                           ;SPI.c: 25: void spiWrite(char dat);SPI.c: 26: {;SPI.c: 27:     SSPBUF = dat;
  1449     049E  0870               	movf	spiWrite@dat,w
  1450     049F  1283               	bcf	3,5	;RP0=0, select bank0
  1451     04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1452     04A1  0093               	movwf	19	;volatile
  1453     04A2                     l134:
  1454     04A2  0008               	return
  1455     04A3                     __end_of_spiWrite:
  1456                           
  1457                           	psect	text5
  1458     04AA                     __ptext5:	
  1459 ;; *************** function _spiRead *****************
  1460 ;; Defined at:
  1461 ;;		line 38 in file "SPI.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;		None
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      unsigned char 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0, pclath, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1475 ;;      Params:         0       0       0       0       0
  1476 ;;      Locals:         0       0       0       0       0
  1477 ;;      Temps:          0       0       0       0       0
  1478 ;;      Totals:         0       0       0       0       0
  1479 ;;Total ram usage:        0 bytes
  1480 ;; Hardware stack levels used: 1
  1481 ;; Hardware stack levels required when called: 1
  1482 ;; This function calls:
  1483 ;;		_spiReceiveWait
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489     04AA                     _spiRead:	
  1490                           ;psect for function _spiRead
  1491                           
  1492     04AA                     l1153:	
  1493                           ;incstack = 0
  1494                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1495                           
  1496                           
  1497                           ;SPI.c: 40:     spiReceiveWait();
  1498     04AA  120A  118A  24A3  120A  118A  	fcall	_spiReceiveWait
  1499     04AF                     l1155:
  1500                           
  1501                           ;SPI.c: 41:     return(SSPBUF);
  1502     04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1503     04B0  1303               	bcf	3,6	;RP1=0, select bank0
  1504     04B1  0813               	movf	19,w	;volatile
  1505     04B2                     l142:
  1506     04B2  0008               	return
  1507     04B3                     __end_of_spiRead:
  1508                           
  1509                           	psect	text6
  1510     04A3                     __ptext6:	
  1511 ;; *************** function _spiReceiveWait *****************
  1512 ;; Defined at:
  1513 ;;		line 20 in file "SPI.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;		None
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;		None
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		None
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1527 ;;      Params:         0       0       0       0       0
  1528 ;;      Locals:         0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0
  1530 ;;      Totals:         0       0       0       0       0
  1531 ;;Total ram usage:        0 bytes
  1532 ;; Hardware stack levels used: 1
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		_spiRead
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540     04A3                     _spiReceiveWait:	
  1541                           ;psect for function _spiReceiveWait
  1542                           
  1543     04A3                     l1079:	
  1544                           ;incstack = 0
  1545                           ; Regs used in _spiReceiveWait: []
  1546                           
  1547     04A3                     l128:	
  1548                           ;SPI.c: 22:     while ( !SSPSTATbits.BF );
  1549                           
  1550     04A3  1683               	bsf	3,5	;RP0=1, select bank1
  1551     04A4  1303               	bcf	3,6	;RP1=0, select bank1
  1552     04A5  1C14               	btfss	20,0	;volatile
  1553     04A6  2CA8               	goto	u391
  1554     04A7  2CA9               	goto	u390
  1555     04A8                     u391:
  1556     04A8  2CA3               	goto	l128
  1557     04A9                     u390:
  1558     04A9                     l131:
  1559     04A9  0008               	return
  1560     04AA                     __end_of_spiReceiveWait:
  1561                           
  1562                           	psect	text7
  1563     0512                     __ptext7:	
  1564 ;; *************** function _setup *****************
  1565 ;; Defined at:
  1566 ;;		line 90 in file "main.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;		None
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  1    wreg      void 
  1573 ;; Registers used:
  1574 ;;		wreg, status,2, status,0, pclath, cstack
  1575 ;; Tracked objects:
  1576 ;;		On entry : 0/0
  1577 ;;		On exit  : 0/0
  1578 ;;		Unchanged: 0/0
  1579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1580 ;;      Params:         0       0       0       0       0
  1581 ;;      Locals:         0       0       0       0       0
  1582 ;;      Temps:          0       0       0       0       0
  1583 ;;      Totals:         0       0       0       0       0
  1584 ;;Total ram usage:        0 bytes
  1585 ;; Hardware stack levels used: 1
  1586 ;; Hardware stack levels required when called: 1
  1587 ;; This function calls:
  1588 ;;		_spiInit
  1589 ;; This function is called by:
  1590 ;;		_main
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593                           
  1594     0512                     _setup:	
  1595                           ;psect for function _setup
  1596                           
  1597     0512                     l1129:	
  1598                           ;incstack = 0
  1599                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
  1600                           
  1601                           
  1602                           ;main.c: 91:     ANSEL = 0;
  1603     0512  1683               	bsf	3,5	;RP0=1, select bank3
  1604     0513  1703               	bsf	3,6	;RP1=1, select bank3
  1605     0514  0188               	clrf	8	;volatile
  1606                           
  1607                           ;main.c: 92:     ANSELH = 0;
  1608     0515  0189               	clrf	9	;volatile
  1609                           
  1610                           ;main.c: 93:     TRISB = 0;
  1611     0516  1683               	bsf	3,5	;RP0=1, select bank1
  1612     0517  1303               	bcf	3,6	;RP1=0, select bank1
  1613     0518  0186               	clrf	6	;volatile
  1614                           
  1615                           ;main.c: 94:     TRISD = 0;
  1616     0519  0188               	clrf	8	;volatile
  1617                           
  1618                           ;main.c: 95:     PORTB = 0;
  1619     051A  1283               	bcf	3,5	;RP0=0, select bank0
  1620     051B  1303               	bcf	3,6	;RP1=0, select bank0
  1621     051C  0186               	clrf	6	;volatile
  1622                           
  1623                           ;main.c: 96:     PORTD = 0;
  1624     051D  0188               	clrf	8	;volatile
  1625     051E                     l1131:
  1626                           
  1627                           ;main.c: 97:     TRISCbits.TRISC2 = 0;
  1628     051E  1683               	bsf	3,5	;RP0=1, select bank1
  1629     051F  1303               	bcf	3,6	;RP1=0, select bank1
  1630     0520  1107               	bcf	7,2	;volatile
  1631     0521                     l1133:
  1632                           
  1633                           ;main.c: 98:     PORTCbits.RC2 = 1;
  1634     0521  1283               	bcf	3,5	;RP0=0, select bank0
  1635     0522  1303               	bcf	3,6	;RP1=0, select bank0
  1636     0523  1507               	bsf	7,2	;volatile
  1637     0524                     l1135:
  1638                           
  1639                           ;main.c: 99:     OSCCONbits.IRCF = 0b110;
  1640     0524  1683               	bsf	3,5	;RP0=1, select bank1
  1641     0525  1303               	bcf	3,6	;RP1=0, select bank1
  1642     0526  080F               	movf	15,w	;volatile
  1643     0527  398F               	andlw	-113
  1644     0528  3860               	iorlw	96
  1645     0529  008F               	movwf	15	;volatile
  1646     052A                     l1137:
  1647                           
  1648                           ;main.c: 100:     OSCCONbits.SCS = 1;
  1649     052A  140F               	bsf	15,0	;volatile
  1650     052B                     l1139:
  1651                           
  1652                           ;main.c: 101:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LO
      +                          W, SPI_IDLE_2_ACTIVE);
  1653     052B  01F0               	clrf	spiInit@sDataSample
  1654     052C  01F1               	clrf	spiInit@sClockIdle
  1655     052D  01F2               	clrf	spiInit@sTransmitEdge
  1656     052E  3020               	movlw	32
  1657     052F  120A  118A  24C0  120A  118A  	fcall	_spiInit
  1658     0534                     l53:
  1659     0534  0008               	return
  1660     0535                     __end_of_setup:
  1661                           
  1662                           	psect	text8
  1663     04C0                     __ptext8:	
  1664 ;; *************** function _spiInit *****************
  1665 ;; Defined at:
  1666 ;;		line 3 in file "SPI.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  sType           1    wreg     enum E1292
  1669 ;;  sDataSample     1    0[COMMON] enum E1300
  1670 ;;  sClockIdle      1    1[COMMON] enum E1304
  1671 ;;  sTransmitEdg    1    2[COMMON] enum E1308
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;  sType           1    3[COMMON] enum E1292
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1683 ;;      Params:         3       0       0       0       0
  1684 ;;      Locals:         1       0       0       0       0
  1685 ;;      Temps:          0       0       0       0       0
  1686 ;;      Totals:         4       0       0       0       0
  1687 ;;Total ram usage:        4 bytes
  1688 ;; Hardware stack levels used: 1
  1689 ;; This function calls:
  1690 ;;		Nothing
  1691 ;; This function is called by:
  1692 ;;		_setup
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696     04C0                     _spiInit:	
  1697                           ;psect for function _spiInit
  1698                           
  1699                           
  1700                           ;incstack = 0
  1701                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1702                           ;spiInit@sType stored from wreg
  1703     04C0  00F3               	movwf	spiInit@sType
  1704     04C1                     l1039:
  1705                           
  1706                           ;SPI.c: 3: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sClo
      +                          ckIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 4: {;SPI.c: 5:     TRISC5 = 0;
  1707     04C1  1683               	bsf	3,5	;RP0=1, select bank1
  1708     04C2  1303               	bcf	3,6	;RP1=0, select bank1
  1709     04C3  1287               	bcf	7,5	;volatile
  1710                           
  1711                           ;SPI.c: 6:     if(sType & 0b00000100)
  1712     04C4  1D73               	btfss	spiInit@sType,2
  1713     04C5  2CC7               	goto	u371
  1714     04C6  2CC8               	goto	u370
  1715     04C7                     u371:
  1716     04C7  2CCC               	goto	l1045
  1717     04C8                     u370:
  1718     04C8                     l1041:
  1719                           
  1720                           ;SPI.c: 7:     {;SPI.c: 8:         SSPSTAT = sTransmitEdge;
  1721     04C8  0872               	movf	spiInit@sTransmitEdge,w
  1722     04C9  0094               	movwf	20	;volatile
  1723     04CA                     l1043:
  1724                           
  1725                           ;SPI.c: 9:         TRISC3 = 1;
  1726     04CA  1587               	bsf	7,3	;volatile
  1727                           
  1728                           ;SPI.c: 10:     }
  1729     04CB  2CD0               	goto	l124
  1730     04CC                     l1045:
  1731                           
  1732                           ;SPI.c: 12:     {;SPI.c: 13:         SSPSTAT = sDataSample | sTransmitEdge;
  1733     04CC  0870               	movf	spiInit@sDataSample,w
  1734     04CD  0472               	iorwf	spiInit@sTransmitEdge,w
  1735     04CE  0094               	movwf	20	;volatile
  1736     04CF                     l1047:
  1737                           
  1738                           ;SPI.c: 14:         TRISC3 = 0;
  1739     04CF  1187               	bcf	7,3	;volatile
  1740     04D0                     l124:	
  1741                           ;SPI.c: 15:     }
  1742                           
  1743                           
  1744                           ;SPI.c: 17:     SSPCON = sType | sClockIdle;
  1745     04D0  0873               	movf	spiInit@sType,w
  1746     04D1  0471               	iorwf	spiInit@sClockIdle,w
  1747     04D2  1283               	bcf	3,5	;RP0=0, select bank0
  1748     04D3  1303               	bcf	3,6	;RP1=0, select bank0
  1749     04D4  0094               	movwf	20	;volatile
  1750     04D5                     l125:
  1751     04D5  0008               	return
  1752     04D6                     __end_of_spiInit:
  1753                           
  1754                           	psect	text9
  1755     05A2                     __ptext9:	
  1756 ;; *************** function _Lcd_Write_String *****************
  1757 ;; Defined at:
  1758 ;;		line 88 in file "LCD.c"
  1759 ;; Parameters:    Size  Location     Type
  1760 ;;  a               2    5[COMMON] PTR unsigned char 
  1761 ;;		 -> STR_2(4), valor(1), 
  1762 ;; Auto vars:     Size  Location     Type
  1763 ;;  i               2   10[COMMON] int 
  1764 ;; Return value:  Size  Location     Type
  1765 ;;                  1    wreg      void 
  1766 ;; Registers used:
  1767 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1768 ;; Tracked objects:
  1769 ;;		On entry : 0/0
  1770 ;;		On exit  : 0/0
  1771 ;;		Unchanged: 0/0
  1772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1773 ;;      Params:         2       0       0       0       0
  1774 ;;      Locals:         2       0       0       0       0
  1775 ;;      Temps:          3       0       0       0       0
  1776 ;;      Totals:         7       0       0       0       0
  1777 ;;Total ram usage:        7 bytes
  1778 ;; Hardware stack levels used: 1
  1779 ;; Hardware stack levels required when called: 2
  1780 ;; This function calls:
  1781 ;;		_Lcd_Write_Char
  1782 ;; This function is called by:
  1783 ;;		_main
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787     05A2                     _Lcd_Write_String:	
  1788                           ;psect for function _Lcd_Write_String
  1789                           
  1790     05A2                     l1233:	
  1791                           ;incstack = 0
  1792                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1793                           
  1794                           
  1795                           ;LCD.c: 89:     int i;;LCD.c: 90:     for (i = 0; a[i] != '\0'; i++)
  1796     05A2  01FA               	clrf	Lcd_Write_String@i
  1797     05A3  01FB               	clrf	Lcd_Write_String@i+1
  1798     05A4  2DC7               	goto	l1239
  1799     05A5                     l1235:
  1800                           
  1801                           ;LCD.c: 91:         Lcd_Write_Char(a[i]);
  1802     05A5  087A               	movf	Lcd_Write_String@i,w
  1803     05A6  0775               	addwf	Lcd_Write_String@a,w
  1804     05A7  00F8               	movwf	??_Lcd_Write_String+1
  1805     05A8  0876               	movf	Lcd_Write_String@a+1,w
  1806     05A9  00F7               	movwf	??_Lcd_Write_String
  1807     05AA  1803               	skipnc
  1808     05AB  0AF7               	incf	??_Lcd_Write_String,f
  1809     05AC  1FFA               	btfss	Lcd_Write_String@i,7
  1810     05AD  2DAF               	goto	u620
  1811     05AE  03F7               	decf	??_Lcd_Write_String,f
  1812     05AF                     u620:
  1813     05AF  0877               	movf	??_Lcd_Write_String,w
  1814     05B0  00F9               	movwf	??_Lcd_Write_String+2
  1815     05B1  0879               	movf	??_Lcd_Write_String+2,w
  1816     05B2  1283               	bcf	3,5	;RP0=0, select bank0
  1817     05B3  1303               	bcf	3,6	;RP1=0, select bank0
  1818     05B4  00FF               	movwf	btemp+1
  1819     05B5  0878               	movf	??_Lcd_Write_String+1,w
  1820     05B6  0084               	movwf	4
  1821     05B7  120A  118A  2003  120A  118A  	fcall	stringtab
  1822     05BC  120A  118A  2535  120A  118A  	fcall	_Lcd_Write_Char
  1823     05C1                     l1237:
  1824     05C1  3001               	movlw	1
  1825     05C2  07FA               	addwf	Lcd_Write_String@i,f
  1826     05C3  1803               	skipnc
  1827     05C4  0AFB               	incf	Lcd_Write_String@i+1,f
  1828     05C5  3000               	movlw	0
  1829     05C6  07FB               	addwf	Lcd_Write_String@i+1,f
  1830     05C7                     l1239:
  1831     05C7  087A               	movf	Lcd_Write_String@i,w
  1832     05C8  0775               	addwf	Lcd_Write_String@a,w
  1833     05C9  00F8               	movwf	??_Lcd_Write_String+1
  1834     05CA  0876               	movf	Lcd_Write_String@a+1,w
  1835     05CB  00F7               	movwf	??_Lcd_Write_String
  1836     05CC  1803               	skipnc
  1837     05CD  0AF7               	incf	??_Lcd_Write_String,f
  1838     05CE  1FFA               	btfss	Lcd_Write_String@i,7
  1839     05CF  2DD1               	goto	u630
  1840     05D0  03F7               	decf	??_Lcd_Write_String,f
  1841     05D1                     u630:
  1842     05D1  0877               	movf	??_Lcd_Write_String,w
  1843     05D2  00F9               	movwf	??_Lcd_Write_String+2
  1844     05D3  0879               	movf	??_Lcd_Write_String+2,w
  1845     05D4  1283               	bcf	3,5	;RP0=0, select bank0
  1846     05D5  1303               	bcf	3,6	;RP1=0, select bank0
  1847     05D6  00FF               	movwf	btemp+1
  1848     05D7  0878               	movf	??_Lcd_Write_String+1,w
  1849     05D8  0084               	movwf	4
  1850     05D9  120A  118A  2003  120A  118A  	fcall	stringtab
  1851     05DE  3A00               	xorlw	0
  1852     05DF  1D03               	skipz
  1853     05E0  2DE2               	goto	u641
  1854     05E1  2DE3               	goto	u640
  1855     05E2                     u641:
  1856     05E2  2DA5               	goto	l1235
  1857     05E3                     u640:
  1858     05E3                     l102:
  1859     05E3  0008               	return
  1860     05E4                     __end_of_Lcd_Write_String:
  1861                           
  1862                           	psect	text10
  1863     0535                     __ptext10:	
  1864 ;; *************** function _Lcd_Write_Char *****************
  1865 ;; Defined at:
  1866 ;;		line 73 in file "LCD.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  a               1    wreg     unsigned char 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  a               1    4[COMMON] unsigned char 
  1871 ;;  y               1    3[COMMON] unsigned char 
  1872 ;;  temp            1    2[COMMON] unsigned char 
  1873 ;; Return value:  Size  Location     Type
  1874 ;;                  1    wreg      void 
  1875 ;; Registers used:
  1876 ;;		wreg, status,2, status,0, pclath, cstack
  1877 ;; Tracked objects:
  1878 ;;		On entry : 0/0
  1879 ;;		On exit  : 0/0
  1880 ;;		Unchanged: 0/0
  1881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1882 ;;      Params:         0       0       0       0       0
  1883 ;;      Locals:         3       0       0       0       0
  1884 ;;      Temps:          1       0       0       0       0
  1885 ;;      Totals:         4       0       0       0       0
  1886 ;;Total ram usage:        4 bytes
  1887 ;; Hardware stack levels used: 1
  1888 ;; Hardware stack levels required when called: 1
  1889 ;; This function calls:
  1890 ;;		_Lcd_Port
  1891 ;; This function is called by:
  1892 ;;		_Lcd_Write_String
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896     0535                     _Lcd_Write_Char:	
  1897                           ;psect for function _Lcd_Write_Char
  1898                           
  1899                           
  1900                           ;incstack = 0
  1901                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1902                           ;Lcd_Write_Char@a stored from wreg
  1903     0535  00F4               	movwf	Lcd_Write_Char@a
  1904     0536                     l1059:
  1905                           
  1906                           ;LCD.c: 74:     char temp, y;;LCD.c: 75:     temp = a & 0x0F;
  1907     0536  0874               	movf	Lcd_Write_Char@a,w
  1908     0537  390F               	andlw	15
  1909     0538  00F2               	movwf	Lcd_Write_Char@temp
  1910                           
  1911                           ;LCD.c: 76:     y = a & 0xF0;
  1912     0539  0874               	movf	Lcd_Write_Char@a,w
  1913     053A  39F0               	andlw	240
  1914     053B  00F3               	movwf	Lcd_Write_Char@y
  1915     053C                     l1061:
  1916                           
  1917                           ;LCD.c: 77:     PORTDbits.RD2 = 1;
  1918     053C  1283               	bcf	3,5	;RP0=0, select bank0
  1919     053D  1303               	bcf	3,6	;RP1=0, select bank0
  1920     053E  1508               	bsf	8,2	;volatile
  1921     053F                     l1063:
  1922                           
  1923                           ;LCD.c: 78:     Lcd_Port(y >> 4);
  1924     053F  0873               	movf	Lcd_Write_Char@y,w
  1925     0540  00F1               	movwf	??_Lcd_Write_Char
  1926     0541  3004               	movlw	4
  1927     0542                     u385:
  1928     0542  1003               	clrc
  1929     0543  0CF1               	rrf	??_Lcd_Write_Char,f
  1930     0544  3EFF               	addlw	-1
  1931     0545  1D03               	skipz
  1932     0546  2D42               	goto	u385
  1933     0547  0871               	movf	??_Lcd_Write_Char,w
  1934     0548  120A  118A  24F0  120A  118A  	fcall	_Lcd_Port
  1935     054D                     l1065:
  1936                           
  1937                           ;LCD.c: 79:     RD3 = 1;
  1938     054D  1283               	bcf	3,5	;RP0=0, select bank0
  1939     054E  1303               	bcf	3,6	;RP1=0, select bank0
  1940     054F  1588               	bsf	8,3	;volatile
  1941     0550                     l1067:
  1942                           
  1943                           ;LCD.c: 80:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1944     0550  300D               	movlw	13
  1945     0551  00F1               	movwf	??_Lcd_Write_Char
  1946     0552                     u677:
  1947     0552  0BF1               	decfsz	??_Lcd_Write_Char,f
  1948     0553  2D52               	goto	u677
  1949     0554                     l1069:
  1950                           
  1951                           ;LCD.c: 81:     RD3 = 0;
  1952     0554  1283               	bcf	3,5	;RP0=0, select bank0
  1953     0555  1303               	bcf	3,6	;RP1=0, select bank0
  1954     0556  1188               	bcf	8,3	;volatile
  1955     0557                     l1071:
  1956                           
  1957                           ;LCD.c: 82:     Lcd_Port(temp);
  1958     0557  0872               	movf	Lcd_Write_Char@temp,w
  1959     0558  120A  118A  24F0  120A  118A  	fcall	_Lcd_Port
  1960     055D                     l1073:
  1961                           
  1962                           ;LCD.c: 83:     RD3 = 1;
  1963     055D  1283               	bcf	3,5	;RP0=0, select bank0
  1964     055E  1303               	bcf	3,6	;RP1=0, select bank0
  1965     055F  1588               	bsf	8,3	;volatile
  1966     0560                     l1075:
  1967                           
  1968                           ;LCD.c: 84:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  1969     0560  300D               	movlw	13
  1970     0561  00F1               	movwf	??_Lcd_Write_Char
  1971     0562                     u687:
  1972     0562  0BF1               	decfsz	??_Lcd_Write_Char,f
  1973     0563  2D62               	goto	u687
  1974     0564                     l1077:
  1975                           
  1976                           ;LCD.c: 85:     RD3 = 0;
  1977     0564  1283               	bcf	3,5	;RP0=0, select bank0
  1978     0565  1303               	bcf	3,6	;RP1=0, select bank0
  1979     0566  1188               	bcf	8,3	;volatile
  1980     0567                     l96:
  1981     0567  0008               	return
  1982     0568                     __end_of_Lcd_Write_Char:
  1983                           
  1984                           	psect	text11
  1985     0628                     __ptext11:	
  1986 ;; *************** function _Lcd_Set_Cursor *****************
  1987 ;; Defined at:
  1988 ;;		line 38 in file "LCD.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;  a               1    wreg     unsigned char 
  1991 ;;  b               1    4[COMMON] unsigned char 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  a               1    6[COMMON] unsigned char 
  1994 ;;  temp            1    9[COMMON] unsigned char 
  1995 ;;  y               1    8[COMMON] unsigned char 
  1996 ;;  z               1    7[COMMON] unsigned char 
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0, pclath, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2006 ;;      Params:         1       0       0       0       0
  2007 ;;      Locals:         4       0       0       0       0
  2008 ;;      Temps:          1       0       0       0       0
  2009 ;;      Totals:         6       0       0       0       0
  2010 ;;Total ram usage:        6 bytes
  2011 ;; Hardware stack levels used: 1
  2012 ;; Hardware stack levels required when called: 2
  2013 ;; This function calls:
  2014 ;;		_Lcd_Cmd
  2015 ;; This function is called by:
  2016 ;;		_main
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020     0628                     _Lcd_Set_Cursor:	
  2021                           ;psect for function _Lcd_Set_Cursor
  2022                           
  2023                           
  2024                           ;incstack = 0
  2025                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2026                           ;Lcd_Set_Cursor@a stored from wreg
  2027     0628  00F6               	movwf	Lcd_Set_Cursor@a
  2028     0629                     l1213:
  2029                           
  2030                           ;LCD.c: 39:     char temp, z, y;;LCD.c: 40:     if (a == 1) {
  2031     0629  0376               	decf	Lcd_Set_Cursor@a,w
  2032     062A  1D03               	btfss	3,2
  2033     062B  2E2D               	goto	u581
  2034     062C  2E2E               	goto	u580
  2035     062D                     u581:
  2036     062D  2E4B               	goto	l1223
  2037     062E                     u580:
  2038     062E                     l1215:
  2039                           
  2040                           ;LCD.c: 41:         temp = 0x80 + b - 1;
  2041     062E  0874               	movf	Lcd_Set_Cursor@b,w
  2042     062F  3E7F               	addlw	127
  2043     0630  00F9               	movwf	Lcd_Set_Cursor@temp
  2044                           
  2045                           ;LCD.c: 42:         z = temp >> 4;
  2046     0631  0879               	movf	Lcd_Set_Cursor@temp,w
  2047     0632  00F5               	movwf	??_Lcd_Set_Cursor
  2048     0633  3004               	movlw	4
  2049     0634                     u595:
  2050     0634  1003               	clrc
  2051     0635  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2052     0636  3EFF               	addlw	-1
  2053     0637  1D03               	skipz
  2054     0638  2E34               	goto	u595
  2055     0639  0875               	movf	??_Lcd_Set_Cursor,w
  2056     063A  00F7               	movwf	Lcd_Set_Cursor@z
  2057     063B                     l1217:
  2058                           
  2059                           ;LCD.c: 43:         y = temp & 0x0F;
  2060     063B  0879               	movf	Lcd_Set_Cursor@temp,w
  2061     063C  390F               	andlw	15
  2062     063D  00F8               	movwf	Lcd_Set_Cursor@y
  2063     063E                     l1219:
  2064                           
  2065                           ;LCD.c: 44:         Lcd_Cmd(z);
  2066     063E  0877               	movf	Lcd_Set_Cursor@z,w
  2067     063F  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2068     0644                     l1221:
  2069                           
  2070                           ;LCD.c: 45:         Lcd_Cmd(y);
  2071     0644  0878               	movf	Lcd_Set_Cursor@y,w
  2072     0645  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2073                           
  2074                           ;LCD.c: 46:     } else if (a == 2) {
  2075     064A  2E6D               	goto	l90
  2076     064B                     l1223:
  2077     064B  3002               	movlw	2
  2078     064C  0676               	xorwf	Lcd_Set_Cursor@a,w
  2079     064D  1D03               	btfss	3,2
  2080     064E  2E50               	goto	u601
  2081     064F  2E51               	goto	u600
  2082     0650                     u601:
  2083     0650  2E6D               	goto	l90
  2084     0651                     u600:
  2085     0651                     l1225:
  2086                           
  2087                           ;LCD.c: 47:         temp = 0xC0 + b - 1;
  2088     0651  0874               	movf	Lcd_Set_Cursor@b,w
  2089     0652  3EBF               	addlw	191
  2090     0653  00F9               	movwf	Lcd_Set_Cursor@temp
  2091                           
  2092                           ;LCD.c: 48:         z = temp >> 4;
  2093     0654  0879               	movf	Lcd_Set_Cursor@temp,w
  2094     0655  00F5               	movwf	??_Lcd_Set_Cursor
  2095     0656  3004               	movlw	4
  2096     0657                     u615:
  2097     0657  1003               	clrc
  2098     0658  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2099     0659  3EFF               	addlw	-1
  2100     065A  1D03               	skipz
  2101     065B  2E57               	goto	u615
  2102     065C  0875               	movf	??_Lcd_Set_Cursor,w
  2103     065D  00F7               	movwf	Lcd_Set_Cursor@z
  2104     065E                     l1227:
  2105                           
  2106                           ;LCD.c: 49:         y = temp & 0x0F;
  2107     065E  0879               	movf	Lcd_Set_Cursor@temp,w
  2108     065F  390F               	andlw	15
  2109     0660  00F8               	movwf	Lcd_Set_Cursor@y
  2110     0661                     l1229:
  2111                           
  2112                           ;LCD.c: 50:         Lcd_Cmd(z);
  2113     0661  0877               	movf	Lcd_Set_Cursor@z,w
  2114     0662  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2115     0667                     l1231:
  2116                           
  2117                           ;LCD.c: 51:         Lcd_Cmd(y);
  2118     0667  0878               	movf	Lcd_Set_Cursor@y,w
  2119     0668  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2120     066D                     l90:
  2121     066D  0008               	return
  2122     066E                     __end_of_Lcd_Set_Cursor:
  2123                           
  2124                           	psect	text12
  2125     066E                     __ptext12:	
  2126 ;; *************** function _Lcd_Init *****************
  2127 ;; Defined at:
  2128 ;;		line 55 in file "LCD.c"
  2129 ;; Parameters:    Size  Location     Type
  2130 ;;		None
  2131 ;; Auto vars:     Size  Location     Type
  2132 ;;		None
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  1    wreg      void 
  2135 ;; Registers used:
  2136 ;;		wreg, status,2, status,0, pclath, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2142 ;;      Params:         0       0       0       0       0
  2143 ;;      Locals:         0       0       0       0       0
  2144 ;;      Temps:          2       0       0       0       0
  2145 ;;      Totals:         2       0       0       0       0
  2146 ;;Total ram usage:        2 bytes
  2147 ;; Hardware stack levels used: 1
  2148 ;; Hardware stack levels required when called: 2
  2149 ;; This function calls:
  2150 ;;		_Lcd_Cmd
  2151 ;;		_Lcd_Port
  2152 ;; This function is called by:
  2153 ;;		_main
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157     066E                     _Lcd_Init:	
  2158                           ;psect for function _Lcd_Init
  2159                           
  2160     066E                     l1141:	
  2161                           ;incstack = 0
  2162                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2163                           
  2164                           
  2165                           ;LCD.c: 56:     Lcd_Port(0x00);
  2166     066E  3000               	movlw	0
  2167     066F  120A  118A  24F0  120A  118A  	fcall	_Lcd_Port
  2168     0674                     l1143:
  2169                           
  2170                           ;LCD.c: 57:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2171     0674  301A               	movlw	26
  2172     0675  00F5               	movwf	??_Lcd_Init+1
  2173     0676  30F8               	movlw	248
  2174     0677  00F4               	movwf	??_Lcd_Init
  2175     0678                     u697:
  2176     0678  0BF4               	decfsz	??_Lcd_Init,f
  2177     0679  2E78               	goto	u697
  2178     067A  0BF5               	decfsz	??_Lcd_Init+1,f
  2179     067B  2E78               	goto	u697
  2180     067C  0000               	nop
  2181     067D                     l1145:
  2182                           
  2183                           ;LCD.c: 58:     Lcd_Cmd(0x03);
  2184     067D  3003               	movlw	3
  2185     067E  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2186                           
  2187                           ;LCD.c: 59:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2188     0683  3007               	movlw	7
  2189     0684  00F5               	movwf	??_Lcd_Init+1
  2190     0685  307D               	movlw	125
  2191     0686  00F4               	movwf	??_Lcd_Init
  2192     0687                     u707:
  2193     0687  0BF4               	decfsz	??_Lcd_Init,f
  2194     0688  2E87               	goto	u707
  2195     0689  0BF5               	decfsz	??_Lcd_Init+1,f
  2196     068A  2E87               	goto	u707
  2197     068B                     l1147:
  2198                           
  2199                           ;LCD.c: 60:     Lcd_Cmd(0x03);
  2200     068B  3003               	movlw	3
  2201     068C  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2202     0691                     l1149:
  2203                           
  2204                           ;LCD.c: 61:     _delay((unsigned long)((11)*(4000000/4000.0)));
  2205     0691  300F               	movlw	15
  2206     0692  00F5               	movwf	??_Lcd_Init+1
  2207     0693  3047               	movlw	71
  2208     0694  00F4               	movwf	??_Lcd_Init
  2209     0695                     u717:
  2210     0695  0BF4               	decfsz	??_Lcd_Init,f
  2211     0696  2E95               	goto	u717
  2212     0697  0BF5               	decfsz	??_Lcd_Init+1,f
  2213     0698  2E95               	goto	u717
  2214     0699  2E9A               	nop2
  2215                           
  2216                           ;LCD.c: 62:     Lcd_Cmd(0x03);
  2217     069A  3003               	movlw	3
  2218     069B  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2219                           
  2220                           ;LCD.c: 64:     Lcd_Cmd(0x02);
  2221     06A0  3002               	movlw	2
  2222     06A1  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2223                           
  2224                           ;LCD.c: 65:     Lcd_Cmd(0x02);
  2225     06A6  3002               	movlw	2
  2226     06A7  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2227                           
  2228                           ;LCD.c: 66:     Lcd_Cmd(0x08);
  2229     06AC  3008               	movlw	8
  2230     06AD  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2231                           
  2232                           ;LCD.c: 67:     Lcd_Cmd(0x00);
  2233     06B2  3000               	movlw	0
  2234     06B3  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2235                           
  2236                           ;LCD.c: 68:     Lcd_Cmd(0x0C);
  2237     06B8  300C               	movlw	12
  2238     06B9  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2239                           
  2240                           ;LCD.c: 69:     Lcd_Cmd(0x00);
  2241     06BE  3000               	movlw	0
  2242     06BF  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2243                           
  2244                           ;LCD.c: 70:     Lcd_Cmd(0x06);
  2245     06C4  3006               	movlw	6
  2246     06C5  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2247     06CA                     l93:
  2248     06CA  0008               	return
  2249     06CB                     __end_of_Lcd_Init:
  2250                           
  2251                           	psect	text13
  2252     04B3                     __ptext13:	
  2253 ;; *************** function _Lcd_Clear *****************
  2254 ;; Defined at:
  2255 ;;		line 33 in file "LCD.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;		None
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;		None
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0, pclath, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2269 ;;      Params:         0       0       0       0       0
  2270 ;;      Locals:         0       0       0       0       0
  2271 ;;      Temps:          0       0       0       0       0
  2272 ;;      Totals:         0       0       0       0       0
  2273 ;;Total ram usage:        0 bytes
  2274 ;; Hardware stack levels used: 1
  2275 ;; Hardware stack levels required when called: 2
  2276 ;; This function calls:
  2277 ;;		_Lcd_Cmd
  2278 ;; This function is called by:
  2279 ;;		_main
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283     04B3                     _Lcd_Clear:	
  2284                           ;psect for function _Lcd_Clear
  2285                           
  2286     04B3                     l1211:	
  2287                           ;incstack = 0
  2288                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2289                           
  2290                           
  2291                           ;LCD.c: 34:     Lcd_Cmd(0);
  2292     04B3  3000               	movlw	0
  2293     04B4  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2294                           
  2295                           ;LCD.c: 35:     Lcd_Cmd(1);
  2296     04B9  3001               	movlw	1
  2297     04BA  120A  118A  24D6  120A  118A  	fcall	_Lcd_Cmd
  2298     04BF                     l84:
  2299     04BF  0008               	return
  2300     04C0                     __end_of_Lcd_Clear:
  2301                           
  2302                           	psect	text14
  2303     04D6                     __ptext14:	
  2304 ;; *************** function _Lcd_Cmd *****************
  2305 ;; Defined at:
  2306 ;;		line 25 in file "LCD.c"
  2307 ;; Parameters:    Size  Location     Type
  2308 ;;  a               1    wreg     unsigned char 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  a               1    3[COMMON] unsigned char 
  2311 ;; Return value:  Size  Location     Type
  2312 ;;                  1    wreg      void 
  2313 ;; Registers used:
  2314 ;;		wreg, status,2, status,0, pclath, cstack
  2315 ;; Tracked objects:
  2316 ;;		On entry : 0/0
  2317 ;;		On exit  : 0/0
  2318 ;;		Unchanged: 0/0
  2319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2320 ;;      Params:         0       0       0       0       0
  2321 ;;      Locals:         1       0       0       0       0
  2322 ;;      Temps:          2       0       0       0       0
  2323 ;;      Totals:         3       0       0       0       0
  2324 ;;Total ram usage:        3 bytes
  2325 ;; Hardware stack levels used: 1
  2326 ;; Hardware stack levels required when called: 1
  2327 ;; This function calls:
  2328 ;;		_Lcd_Port
  2329 ;; This function is called by:
  2330 ;;		_Lcd_Clear
  2331 ;;		_Lcd_Set_Cursor
  2332 ;;		_Lcd_Init
  2333 ;;		_Lcd_Shift_Right
  2334 ;;		_Lcd_Shift_Left
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338     04D6                     _Lcd_Cmd:	
  2339                           ;psect for function _Lcd_Cmd
  2340                           
  2341                           
  2342                           ;incstack = 0
  2343                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2344                           ;Lcd_Cmd@a stored from wreg
  2345     04D6  00F3               	movwf	Lcd_Cmd@a
  2346     04D7                     l1049:
  2347                           
  2348                           ;LCD.c: 26:     PORTDbits.RD2 = 0;
  2349     04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2350     04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2351     04D9  1108               	bcf	8,2	;volatile
  2352     04DA                     l1051:
  2353                           
  2354                           ;LCD.c: 27:     Lcd_Port(a);
  2355     04DA  0873               	movf	Lcd_Cmd@a,w
  2356     04DB  120A  118A  24F0  120A  118A  	fcall	_Lcd_Port
  2357     04E0                     l1053:
  2358                           
  2359                           ;LCD.c: 28:     RD3 = 1;
  2360     04E0  1283               	bcf	3,5	;RP0=0, select bank0
  2361     04E1  1303               	bcf	3,6	;RP1=0, select bank0
  2362     04E2  1588               	bsf	8,3	;volatile
  2363     04E3                     l1055:
  2364                           
  2365                           ;LCD.c: 29:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2366     04E3  3006               	movlw	6
  2367     04E4  00F2               	movwf	??_Lcd_Cmd+1
  2368     04E5  3030               	movlw	48
  2369     04E6  00F1               	movwf	??_Lcd_Cmd
  2370     04E7                     u727:
  2371     04E7  0BF1               	decfsz	??_Lcd_Cmd,f
  2372     04E8  2CE7               	goto	u727
  2373     04E9  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2374     04EA  2CE7               	goto	u727
  2375     04EB  0000               	nop
  2376     04EC                     l1057:
  2377                           
  2378                           ;LCD.c: 30:     RD3 = 0;
  2379     04EC  1283               	bcf	3,5	;RP0=0, select bank0
  2380     04ED  1303               	bcf	3,6	;RP1=0, select bank0
  2381     04EE  1188               	bcf	8,3	;volatile
  2382     04EF                     l81:
  2383     04EF  0008               	return
  2384     04F0                     __end_of_Lcd_Cmd:
  2385                           
  2386                           	psect	text15
  2387     04F0                     __ptext15:	
  2388 ;; *************** function _Lcd_Port *****************
  2389 ;; Defined at:
  2390 ;;		line 3 in file "LCD.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  a               1    wreg     unsigned char 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  a               1    0[COMMON] unsigned char 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2404 ;;      Params:         0       0       0       0       0
  2405 ;;      Locals:         1       0       0       0       0
  2406 ;;      Temps:          0       0       0       0       0
  2407 ;;      Totals:         1       0       0       0       0
  2408 ;;Total ram usage:        1 bytes
  2409 ;; Hardware stack levels used: 1
  2410 ;; This function calls:
  2411 ;;		Nothing
  2412 ;; This function is called by:
  2413 ;;		_Lcd_Cmd
  2414 ;;		_Lcd_Init
  2415 ;;		_Lcd_Write_Char
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419     04F0                     _Lcd_Port:	
  2420                           ;psect for function _Lcd_Port
  2421                           
  2422                           
  2423                           ;incstack = 0
  2424                           ; Regs used in _Lcd_Port: [wreg]
  2425                           ;Lcd_Port@a stored from wreg
  2426     04F0  00F0               	movwf	Lcd_Port@a
  2427     04F1                     l1029:
  2428                           
  2429                           ;LCD.c: 4:     if (a & 1)
  2430     04F1  1C70               	btfss	Lcd_Port@a,0
  2431     04F2  2CF4               	goto	u331
  2432     04F3  2CF5               	goto	u330
  2433     04F4                     u331:
  2434     04F4  2CF9               	goto	l70
  2435     04F5                     u330:
  2436     04F5                     l1031:
  2437                           
  2438                           ;LCD.c: 5:         RD4 = 1;
  2439     04F5  1283               	bcf	3,5	;RP0=0, select bank0
  2440     04F6  1303               	bcf	3,6	;RP1=0, select bank0
  2441     04F7  1608               	bsf	8,4	;volatile
  2442     04F8  2CFC               	goto	l71
  2443     04F9                     l70:	
  2444                           ;LCD.c: 6:     else
  2445                           
  2446                           
  2447                           ;LCD.c: 7:         RD4 = 0;
  2448     04F9  1283               	bcf	3,5	;RP0=0, select bank0
  2449     04FA  1303               	bcf	3,6	;RP1=0, select bank0
  2450     04FB  1208               	bcf	8,4	;volatile
  2451     04FC                     l71:
  2452                           
  2453                           ;LCD.c: 9:     if (a & 2)
  2454     04FC  1CF0               	btfss	Lcd_Port@a,1
  2455     04FD  2CFF               	goto	u341
  2456     04FE  2D00               	goto	u340
  2457     04FF                     u341:
  2458     04FF  2D02               	goto	l72
  2459     0500                     u340:
  2460     0500                     l1033:
  2461                           
  2462                           ;LCD.c: 10:         RD5 = 1;
  2463     0500  1688               	bsf	8,5	;volatile
  2464     0501  2D03               	goto	l73
  2465     0502                     l72:	
  2466                           ;LCD.c: 11:     else
  2467                           
  2468                           
  2469                           ;LCD.c: 12:         RD5 = 0;
  2470     0502  1288               	bcf	8,5	;volatile
  2471     0503                     l73:
  2472                           
  2473                           ;LCD.c: 14:     if (a & 4)
  2474     0503  1D70               	btfss	Lcd_Port@a,2
  2475     0504  2D06               	goto	u351
  2476     0505  2D07               	goto	u350
  2477     0506                     u351:
  2478     0506  2D09               	goto	l74
  2479     0507                     u350:
  2480     0507                     l1035:
  2481                           
  2482                           ;LCD.c: 15:         RD6 = 1;
  2483     0507  1708               	bsf	8,6	;volatile
  2484     0508  2D0A               	goto	l75
  2485     0509                     l74:	
  2486                           ;LCD.c: 16:     else
  2487                           
  2488                           
  2489                           ;LCD.c: 17:         RD6 = 0;
  2490     0509  1308               	bcf	8,6	;volatile
  2491     050A                     l75:
  2492                           
  2493                           ;LCD.c: 19:     if (a & 8)
  2494     050A  1DF0               	btfss	Lcd_Port@a,3
  2495     050B  2D0D               	goto	u361
  2496     050C  2D0E               	goto	u360
  2497     050D                     u361:
  2498     050D  2D10               	goto	l76
  2499     050E                     u360:
  2500     050E                     l1037:
  2501                           
  2502                           ;LCD.c: 20:         RD7 = 1;
  2503     050E  1788               	bsf	8,7	;volatile
  2504     050F  2D11               	goto	l78
  2505     0510                     l76:	
  2506                           ;LCD.c: 21:     else
  2507                           
  2508                           
  2509                           ;LCD.c: 22:         RD7 = 0;
  2510     0510  1388               	bcf	8,7	;volatile
  2511     0511                     l78:
  2512     0511  0008               	return
  2513     0512                     __end_of_Lcd_Port:
  2514     007E                     btemp	set	126	;btemp
  2515     007E                     wtemp0	set	126
  2516                           
  2517                           	psect	idloc
  2518                           
  2519                           ;Config register IDLOC0 @ 0x2000
  2520                           ;	unspecified, using default values
  2521     2000                     	org	8192
  2522     2000  3FFF               	dw	16383
  2523                           
  2524                           ;Config register IDLOC1 @ 0x2001
  2525                           ;	unspecified, using default values
  2526     2001                     	org	8193
  2527     2001  3FFF               	dw	16383
  2528                           
  2529                           ;Config register IDLOC2 @ 0x2002
  2530                           ;	unspecified, using default values
  2531     2002                     	org	8194
  2532     2002  3FFF               	dw	16383
  2533                           
  2534                           ;Config register IDLOC3 @ 0x2003
  2535                           ;	unspecified, using default values
  2536     2003                     	org	8195
  2537     2003  3FFF               	dw	16383
  2538                           
  2539                           	psect	config
  2540                           
  2541                           ;Config register CONFIG1 @ 0x2007
  2542                           ;	Oscillator Selection bits
  2543                           ;	FOSC = EXTRC_NOCLKOUT, RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7
      +                          /OSC1/CLKIN
  2544                           ;	Watchdog Timer Enable bit
  2545                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2546                           ;	Power-up Timer Enable bit
  2547                           ;	PWRTE = OFF, PWRT disabled
  2548                           ;	RE3/MCLR pin function select bit
  2549                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2550                           ;	Code Protection bit
  2551                           ;	CP = OFF, Program memory code protection is disabled
  2552                           ;	Data Code Protection bit
  2553                           ;	CPD = OFF, Data memory code protection is disabled
  2554                           ;	Brown Out Reset Selection bits
  2555                           ;	BOREN = OFF, BOR disabled
  2556                           ;	Internal External Switchover bit
  2557                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2558                           ;	Fail-Safe Clock Monitor Enabled bit
  2559                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2560                           ;	Low Voltage Programming Enable bit
  2561                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2562                           ;	In-Circuit Debugger Mode bit
  2563                           ;	DEBUG = 0x1, unprogrammed default
  2564     2007                     	org	8199
  2565     2007  20D6               	dw	8406
  2566                           
  2567                           ;Config register CONFIG2 @ 0x2008
  2568                           ;	Brown-out Reset Selection bit
  2569                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2570                           ;	Flash Program Memory Self Write Enable bits
  2571                           ;	WRT = OFF, Write protection off
  2572     2008                     	org	8200
  2573     2008  3FFF               	dw	16383

Data Sizes:
    Strings     7
    Constant    10
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     15      17
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 1
		 -> valor(BANK0[1]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 4
		 -> STR_2(CODE[4]), valor(BANK0[1]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_spiInit
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    2763
                                             13 BANK0      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _setup
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1121
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     360
                            _spiInit
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     420
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     532
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _setup
     _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      F      11       5       21.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1F      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Feb 03 00:09:57 2023

                       pc 0002               _SSPSTATbits 0094                        l53 0534  
                      l70 04F9                        l71 04FC                        l72 0502  
                      l73 0503                        l81 04EF                        l74 0509  
                      l90 066D                        l75 050A                        l76 0510  
                      l84 04BF                        l93 06CA                        l78 0511  
                      l96 0567                        fsr 0004                       l102 05E3  
                     l131 04A9                       l124 04D0                       l125 04D5  
                     l142 04B2                       l134 04A2                       l128 04A3  
                     _ADC 002F                       l249 07F7                       l525 0627  
                     l535 05A1                       _RD3 0043                       _RD4 0044  
                     _RD5 0045                       _RD6 0046                       _RD7 0047  
                     u400 05EC                       u401 05EB                       u330 04F5  
                     u331 04F4                       u340 0500                       u420 05FE  
                     u500 058A                       u341 04FF                       u421 05FD  
                     u501 0589                       u350 0507                       u351 0506  
                     u415 05F0                       u360 050E                       u600 0651  
                     u440 060F                       u520 059D                       u361 050D  
                     u601 0650                       u441 060E                       u521 059C  
                     u505 0586                       u370 04C8                       u530 0743  
                     u371 04C7                       u435 05FF                       u515 0591  
                     u531 0742                       u620 05AF                       u460 0623  
                     u540 0797                       u461 0622                       u445 060B  
                     u541 0796                       u630 05D1                       u390 04A9  
                     u470 056E                       u550 07A2                       u615 0657  
                     u391 04A8                       u455 0617                       u471 056D  
                     u551 07A1                       u640 05E3                       u560 07E3  
                     u385 0542                       u641 05E2                       u561 07E2  
                     u545 0793                       u490 0580                       u570 07F3  
                     u707 0687                       u491 057F                       u571 07F2  
                     u580 062E                       u717 0695                       u581 062D  
                     u485 0572                       u727 04E7                       u657 06DC  
                     u595 0634                       u667 06F4                       u677 0552  
                     u687 0562                       u697 0678                       fsr0 0004  
                     indf 0000                      l1101 061D                      l1031 04F5  
                    l1103 0623                      l1111 0571                      l1033 0500  
                    l1041 04C8                      l1121 0590                      l1113 0578  
                    l1201 07E3                      l1035 0507                      l1051 04DA  
                    l1211 04B3                      l1043 04CA                      l1131 051E  
                    l1123 0597                      l1115 057C                      l1107 0568  
                    l1203 07F3                      l1037 050E                      l1029 04F1  
                    l1053 04E0                      l1141 066E                      l1221 0644  
                    l1213 0629                      l1061 053C                      l1045 04CC  
                    l1133 0521                      l1117 0580                      l1109 056E  
                    l1125 059D                      l1055 04E3                      l1143 0674  
                    l1231 0667                      l1215 062E                      l1223 064B  
                    l1071 0557                      l1063 053F                      l1047 04CF  
                    l1039 04C1                      l1135 0524                      l1151 049E  
                    l1119 058A                      l1057 04EC                      l1049 04D7  
                    l1145 067D                      l1225 0651                      l1217 063B  
                    l1073 055D                      l1065 054D                      l1233 05A2  
                    l1137 052A                      l1129 0512                      l1153 04AA  
                    l1081 05E4                      l1161 073D                      l1241 06CB  
                    l1147 068B                      l1227 065E                      l1219 063E  
                    l1075 0560                      l1067 0550                      l1059 0536  
                    l1235 05A5                      l1139 052B                      l1155 04AF  
                    l1091 05FA                      l1083 05E6                      l1163 0743  
                    l1251 06F0                      l1243 06D5                      l1149 0691  
                    l1229 0661                      l1077 0564                      l1069 0554  
                    l1237 05C1                      l1093 05FE                      l1085 05EC  
                    l1173 0754                      l1165 0748                      l1261 0711  
                    l1253 06F8                      l1245 06D8                      l1239 05C7  
                    l1079 04A3                      l1095 060F                      l1087 05EF  
                    l1191 07A2                      l1175 076E                      l1167 074D  
                    l1159 073A                      l1263 0719                      l1255 06FB  
                    l1247 06E0                      l1097 0615                      l1089 05F6  
                    l1193 07A5                      l1185 077C                      l1177 0776  
                    l1169 074F                      l1265 0722                      l1257 06FD  
                    l1249 06E8                      l1099 0616                      l1195 07D1  
                    l1179 077A                      l1267 072A                      l1259 070C  
                    l1197 07D6                      l1189 0798                      l1293 0766  
                    l1199 07DA                      STR_1 0021                      STR_2 001D  
       ?_Lcd_Write_String 0075                      _main 06CB                      btemp 007E  
                    start 0000        ??_Lcd_Write_String 0077           __end_of_Lcd_Cmd 04F0  
                   ?_main 0070                     _ANSEL 0188           __end_of___lwdiv 0628  
         __end_of___lwmod 05A2                     _PORTB 0006                     _PORTD 0008  
                   _TRISB 0086                     _TRISD 0088           __end_of_dpowers 001D  
                   _valor 0030                     _setup 0512                     pclath 000A  
         __end_of_spiInit 04D6           __end_of_spiRead 04B3                     status 0003  
                   wtemp0 007E           __end_of_sprintf 07F8          __end_of_Lcd_Init 06CB  
        __end_of_Lcd_Port 0512           __initialization 07F8              __end_of_main 0737  
                  ??_main 002D                    ?_setup 0070                    _ANSELH 0189  
               ??_Lcd_Cmd 0071                    _TRISC3 043B                    _TRISC5 043D  
                  _SSPCON 0014                    _SSPBUF 0013                 ??___lwdiv 0074  
               ??___lwmod 007C          __end_of_spiWrite 04A3                 ??_spiInit 0073  
               ??_spiRead 0070                 ??_sprintf 0023           Lcd_Set_Cursor@a 0076  
         Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077  
 __end_of__initialization 07FC         __end_of_Lcd_Clear 04C0            __pcstackCOMMON 0070  
           __end_of_setup 0535            _Lcd_Set_Cursor 0628                 ?_Lcd_Init 0070  
               ?_Lcd_Port 0070                   ??_setup 0074                __pbssBANK0 002F  
              __pmaintext 06CB    __end_of_Lcd_Set_Cursor 066E                ??_Lcd_Init 0074  
              ??_Lcd_Port 0070                   _SSPSTAT 0094                __stringtab 0003  
          _Lcd_Write_Char 0535                   _Lcd_Cmd 04D6                 ?_spiWrite 0070  
                 ___lwdiv 05E4                   ___lwmod 0568           ?_Lcd_Set_Cursor 0074  
                 __ptext1 0737                   __ptext2 0568                   __ptext3 05E4  
                 __ptext4 049D                   __ptext5 04AA                   __ptext6 04A3  
                 __ptext7 0512                   __ptext8 04C0                   __ptext9 05A2  
                 _dpowers 0013                   _spiInit 04C0                   _spiRead 04AA  
                 _sprintf 0737    __end_of_Lcd_Write_Char 0568      end_of_initialization 07FC  
              ??_spiWrite 0070                 Lcd_Port@a 0070                 _PORTCbits 0007  
               _PORTDbits 0008                 _TRISCbits 0087               spiWrite@dat 0070  
         ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075         Lcd_Write_String@i 007A  
               _Lcd_Clear 04B3            _spiReceiveWait 04A3          _Lcd_Write_String 05A2  
     start_initialization 07F8    __end_of_spiReceiveWait 04AA                ?_Lcd_Clear 0070  
         Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073                 ___latbits 0002  
           __pcstackBANK0 0020                  ?_Lcd_Cmd 0070               sprintf@flag 0026  
             sprintf@prec 002A          ___lwdiv@dividend 0072           ?_spiReceiveWait 0070  
        ??_Lcd_Set_Cursor 0075                  ?___lwdiv 0070                  ?___lwmod 0078  
               __pstrings 0003                  ?_spiInit 0070                  ?_spiRead 0070  
        ___lwdiv@quotient 0075                  ?_sprintf 0020      spiInit@sTransmitEdge 0072  
      spiInit@sDataSample 0070                  Lcd_Cmd@a 0073               ??_Lcd_Clear 0074  
             __stringbase 0012          ??_Lcd_Write_Char 0071                  _Lcd_Init 066E  
                _Lcd_Port 04F0  __end_of_Lcd_Write_String 05E4        __end_of__stringtab 0013  
              sprintf@val 0028           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 0535                  __ptext11 0628                  __ptext12 066E  
                __ptext13 04B3                  __ptext14 04D6                  __ptext15 04F0  
                _spiWrite 049D              spiInit@sType 0073         spiInit@sClockIdle 0071  
      Lcd_Write_Char@temp 0072                 sprintf@ap 0027                 sprintf@sp 002B  
        ___lwmod@dividend 007A          ??_spiReceiveWait 0070                 stringcode 000D  
              _OSCCONbits 008F        Lcd_Set_Cursor@temp 0079                  sprintf@c 002C  
                sprintf@f 0020           ___lwmod@divisor 0078           ___lwmod@counter 007D  
                stringdir 000D                  stringtab 0003  
